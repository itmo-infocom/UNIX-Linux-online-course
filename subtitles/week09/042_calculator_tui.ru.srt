1
00:00:06,040 --> 00:00:08,060
ОК -- следующий пример.

2
00:00:08,060 --> 00:00:10,890
$ git checkout Example_4

3
00:00:14,480 --> 00:00:20,260
Это кажется странным -- commit и комментарий

4
00:00:20,260 --> 00:00:31,739
аналогичны предыдущему примеру.

5
00:00:31,739 --> 00:00:36,480
Давайте проверим diff:

6
00:00:36,480 --> 00:00:53,329
$ git diff Example_3 Example_4

7
00:00:53,329 --> 00:01:03,140
Ну да -- моя ошибка: я неправильно разместил тег --

8
00:01:03,140 --> 00:01:07,460
до реального внесения изменений!

9
00:01:07,460 --> 00:01:16,980
На самом деле это хороший повод, чтобы поглубже
 заглянуть в наш репозиторий, исправляя это.

10
00:01:16,980 --> 00:01:22,960
Первым делом давайте перейдем к следующему примеру:

11
00:01:22,960 --> 00:01:26,230
$ git checkout Example_5

12
00:01:32,950 --> 00:01:35,870
Что ж -- похоже, отличаются.

13
00:01:35,870 --> 00:01:37,280
Теперь давайте посмотрим на журнал:

14
00:01:37,280 --> 00:01:44,940
$ git log commit f266a24128b1e363eddc073682aac89dd33a86a8
... GUI ...
commit d6453c0c41548a55e3249ea8c3b788c71cb76f7e
... Text UI ...
commit d7f58c65c3e25269977538fdde0ac13d733fbf92 ...

15
00:01:44,940 --> 00:01:59,280
Мы видим еще один commit между ранее обсужденным commit'ом
 и commit'ом графического интерфейса --

16
00:01:59,280 --> 00:02:04,130
текстовый интерфейс.

17
00:02:04,130 --> 00:02:06,350
Перейдем к нему:

18
00:02:06,350 --> 00:02:21,000
$ git checkout d6453c0c41548a55e3249ea8c3b788c71cb76f7e
 ... Text UI.

19
00:02:21,000 --> 00:02:23,620
OK. А что с diff?
$ git diff Example_3 d6453c0c41548a55e3249ea8c3b788c71cb76f7

20
00:02:23,620 --> 00:02:45,360
Итак, хорошо -- изменился README, Makefile и добавился новый файл.

21
00:02:45,379 --> 00:02:52,260
$ ls
Makefile README.md calc calc_ui

22
00:02:52,260 --> 00:02:58,209
`calc_ui` -- это пользовательский интерфейс

23
00:02:58,209 --> 00:03:01,829
для нашего простого калькулятора командной строки.

24
00:03:01,829 --> 00:03:03,569
Заглянем внутрь:

25
00:03:03,569 --> 00:03:05,189
$ cat calc_ui

26
00:03:05,189 --> 00:03:09,559
Сначала мы увидим установку переменных окружения

27
00:03:09,559 --> 00:03:11,950
для временных файлов.

28
00:03:11,950 --> 00:03:18,510
Затем мы определяем функцию `end`, в которой мы удаляем
 временные файлы и выходим

29
00:03:18,510 --> 00:03:25,230
из программы.

30
00:03:25,230 --> 00:03:40,529
Основные действия, выполняемые в программе, --
 бесконечный цикл, в котором мы просто вызываем программу `dialog`

31
00:03:40,529 --> 00:03:46,699
и работаем с результатами, которые она возвращает.

32
00:03:46,699 --> 00:03:49,819
Что это за `dialog`?

33
00:03:49,819 --> 00:03:54,760
Чтобы понять, что это такое, сначала нужно установить эту программу.

34
00:03:54,760 --> 00:04:01,959
В RH-подобных системах таким образом:
$ sudo yum insatll dialog

35
00:04:01,959 --> 00:04:09,969
В Ubuntu мы должны установить эту программу

36
00:04:09,969 --> 00:04:11,960
следующим образом:
$ sudo apt install dialog

37
00:04:11,969 --> 00:04:18,190
Теперь мы просто выполняем `dialog`:

38
00:04:18,190 --> 00:04:34,690
$ dialog

39
00:04:34,690 --> 00:04:41,690
Мы видим длинную справку, которая показывает нам параметры,
 которые мы должны использовать для создания

40
00:04:41,690 --> 00:04:49,940
различных форм интерфейса.

41
00:04:49,940 --> 00:04:51,680
Например:

42
00:04:51,680 --> 00:05:05,000
$ dialog --yesno "To be or not to be?" 5 25

43
00:05:10,720 --> 00:05:18,890
Сделайте свой выбор и посмотрите код выхода из программы:

44
00:05:18,890 --> 00:05:22,040
$ echo $?

45
00:05:22,040 --> 00:05:36,160
Вы увидите ноль, если выберете 'yes', и ненулевое значение, если выберете 'no'.

46
00:05:36,170 --> 00:05:43,170
Как мы понимаем, это программа, которая
 просто показывает нам единообразную форму интерфейса

47
00:05:43,170 --> 00:05:52,220
и возвращает некоторый результат, который мы можем
 использовать в нашем скрипте.

48
00:05:52,220 --> 00:06:19,720
В нашем пользовательском интерфейсе мы используем форму --
inputbox и перенаправляем стандартную ошибку из нее во временный FILE1.

49
00:06:34,300 --> 00:06:42,470
Какое отношение имеет стандартная ошибка к нашей команде?

50
00:06:42,470 --> 00:06:51,210
Вообще говоря, мы не ожидаем ошибок в строке с нашим выражением?

51
00:06:51,210 --> 00:07:00,500
Да, но стандартный вывод программы `dialog`
 уже используется для отрисовывания

52
00:07:00,500 --> 00:07:03,550
формы пользовательского интерфейса.

53
00:07:03,550 --> 00:07:11,840
Насколько мы понимаем, для рисования таких красивых форм
 на стандартный вывод отправляется

54
00:07:11,840 --> 00:07:14,733
набор ESC-последовательностей

55
00:07:14,733 --> 00:07:21,733
для вашего типа терминала. Эти последовательности,
 генерируемые библиотекой ncurses, извлекаются

56
00:07:21,733 --> 00:07:29,590
из базы данных типов терминалов в соответствии с переменной среды TTY.

57
00:07:29,590 --> 00:07:38,360
Чтобы вспомнить это, посмотрите лекцию «Под капотом --
 наборы команд текстовых терминалов».

58
00:07:38,360 --> 00:07:50,900
Таким образом, если диалоговая форма завершилась
 кодом выхода с ошибкой, это означает, что мы нажали

59
00:07:50,900 --> 00:07:57,110
кнопку "Cancel" и затем вызвали функцию "end".

60
00:07:57,110 --> 00:08:03,350
Если мы нажали OK, мы выполняем следующую операцию --
 мы отправляем результат

61
00:08:03,350 --> 00:08:25,470
в наш старый добрый сценарий `calc` и перенаправляем
 вывод и вывод ошибок в отдельные файлы.

62
00:08:25,470 --> 00:08:31,950
Затем отображаем диалоговую форму с результатом,
 если скрипт завершился успешно,

63
00:08:31,950 --> 00:08:45,500
и форму ошибки, если мы получили ошибку.

64
00:08:45,500 --> 00:08:50,149
Ну что ж, смотрится недурно.

65
00:08:50,149 --> 00:09:00,319
И это пример принципа дизайна KISS -- мы разработали простой скрипт

66
00:09:00,319 --> 00:09:09,790
и просто обернули его другим простым скриптом, реализующим UI.

67
00:09:09,790 --> 00:09:19,720
Но для окончательной подготовки нашего приложения к работе
 нам нужно установить наш скрипт `calc`

68
00:09:19,720 --> 00:09:25,440
в каталог из переменной окружения PATH.

69
00:09:25,440 --> 00:09:33,000
И для этого мы добавили соответствующее правило в Makefile:

70
00:09:33,000 --> 00:09:55,440
$ sudo make install
[sudo] password for liveuser:
install calc calc_ui /usr/local/bin

71
00:09:55,450 --> 00:10:07,510
Теперь давайте поиграем с нашим
 пользовательско-дружественным калькулятором:

72
00:10:07,510 --> 00:10:21,940
$ calc_ui

73
00:10:21,940 --> 00:10:22,440
Отлично!

