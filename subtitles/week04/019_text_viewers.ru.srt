1
00:00:06,109 --> 00:00:10,690
Как мы помним, UNIX изначально создавался
 для автоматизации работы патентного отдела.

2
00:00:10,690 --> 00:00:19,779
По этой причине он имеет богатый набор инструментов
 для работы с текстовыми данными.

3
00:00:19,779 --> 00:00:24,680
Но что такое текст?

4
00:00:24,680 --> 00:00:37,300
Обычно это просто набор байтов, закодированных
 по некоторой таблице кодирования,

5
00:00:37,300 --> 00:00:41,430
в простейшем случае -- ASCII.

6
00:00:41,430 --> 00:00:53,149
А в текстовом файле вы не увидите никакого специального форматирования, такого как полужирный текст, курсив, изображения и т.д. -- 

7
00:00:53,149 --> 00:00:58,239
только текстовые данные.

8
00:00:58,239 --> 00:01:11,640
И это основной формат взаимодействия для утилит UNIX с 1970-х годов.

9
00:01:11,640 --> 00:01:19,190
Как известно, в операционных системах Microsoft
 есть разные режимы работы с файлами --

10
00:01:19,190 --> 00:01:20,190
текстовый и двоичный.

11
00:01:20,190 --> 00:01:27,320
В UNIX все файлы одинаковы, и у нас нет разницы
 между текстовыми и двоичными данными.

12
00:01:27,320 --> 00:01:34,560
Мы помним нашу лекцию «Под капотом -- работа с текстом в Windows».

13
00:01:34,560 --> 00:01:47,159
Первое существо, которое помогает нам
 работать с текстовыми файлами -- это «cat».

14
00:01:47,159 --> 00:01:58,479
Не настоящий «кот», а просто сокращение от concatenation.

15
00:01:58,479 --> 00:02:10,950
Без аргументов `cat` просто копирует стандартный ввод в стандартный вывод.

16
00:02:10,950 --> 00:02:24,950
И, как мы это понимаем, мы можем просто
 перенаправить вывод в файл, и это будет

17
00:02:24,950 --> 00:02:27,471
самый простой способ создать новый файл:

18
00:02:27,471 --> 00:02:38,480
$ cat > file

19
00:02:38,480 --> 00:02:48,450
Когда мы добавляем имена файлов в качестве аргументов
 в команду `cat`, это будет настоящая конкатенация --

20
00:02:48,450 --> 00:03:07,420
при отправке на вывод все они будут слиты в один поток.

21
00:03:07,430 --> 00:03:23,190
И если мы перенаправим их в файл,
 мы получим все эти файлы,

22
00:03:23,190 --> 00:03:24,190
объединенные в выходной файл.

23
00:03:25,430 --> 00:03:34,440
Если мы можем что-то объединить,

24
00:03:34,440 --> 00:03:35,709
мы должны уметь это разделить.

25
00:03:35,709 --> 00:03:43,760
И у нас есть две утилиты для разных типов разделения:

26
00:03:43,760 --> 00:03:47,810
`tee` -- читает из стандартного ввода и пишет

27
00:03:47,810 --> 00:04:03,430
в стандартный вывод и в файлы,
 указанные в качестве аргументов этой команды,

28
00:04:03,430 --> 00:04:34,150
`split` -- разбивает файл на части

29
00:04:34,150 --> 00:04:39,600
фиксированного размера.

30
00:04:39,600 --> 00:04:43,300
Итак -- "viewers".

31
00:04:43,319 --> 00:04:45,590
Что же такое "viewer"?

32
00:04:45,590 --> 00:05:02,360
Как мы помним, в интерфейсе TTY команда `man`
 просто печатала что-то на бумаге.

33
00:05:02,370 --> 00:05:14,740
На полноэкранных терминалах -- при низкой скорости соединения --
мы использовали Ctrl-S (стоп)/Ctrl-Q (повтор).

34
00:05:14,740 --> 00:05:27,589
А теперь нам нужно использовать специальные
 программы просмотра -- "viewers".

35
00:05:27,589 --> 00:05:38,589
В отличие от текстовых редакторов, им не нужно
 читать весь файл перед запуском,

36
00:05:38,589 --> 00:05:51,140
что приводит к более быстрой загрузке файлов
 большего размера. Эти программы просто читают файлы.

37
00:05:51,140 --> 00:06:03,770
Исторически первым вьюером был пейджер «more»,
 разработанный для проекта BSD в 1978 году

38
00:06:03,770 --> 00:06:11,729
Дэниелом Халбертом, аспирантом Калифорнийского университета в Беркли.

39
00:06:11,729 --> 00:06:14,769
Синтаксис команды:

40
00:06:14,769 --> 00:06:22,369
$ man more 
...
more [параметры] [имя_файла]

41
00:06:22,369 --> 00:06:30,389
Если имя файла не указано, `more` использует

42
00:06:30,389 --> 00:06:32,620
входные данные из стандартного ввода.

43
00:06:32,620 --> 00:06:44,979
Как только `more` получает ввод (файл или стандартный ввод),
 он отображает столько, сколько может поместиться

44
00:06:44,979 --> 00:06:48,300
на текущем экране, и ждет ввода пользователя.

45
00:06:48,300 --> 00:07:01,899
Наиболее распространенными методами навигации
 по файлу являются «Enter», который продвигает вывод

46
00:07:01,899 --> 00:07:09,270
на одну строку, и пробел, который продвигает вывод на один экран.

47
00:07:09,270 --> 00:07:17,669
Когда `more` достигает конца файла, он закрывается.

48
00:07:17,669 --> 00:07:33,800
Вы можете выйти из «more», нажав клавишу «q»,
 и клавиша «h» отобразит справку.

49
00:07:33,800 --> 00:07:41,889
В утилите `more` вы можете выполнять поиск
 с помощью регулярных выражений,

50
00:07:41,889 --> 00:07:54,800
используя '/' при просмотре

51
00:07:54,800 --> 00:07:56,429
или опцию '+/' в командной строке.

52
00:07:56,429 --> 00:08:02,280
И вы можете снова выполнить поиск,
 набрав косую черту без регулярного выражения.

53
00:08:02,280 --> 00:08:12,659
Регулярное выражение является очень важной частью культуры UNIX
 и используется во многих других программах

54
00:08:12,659 --> 00:08:14,760
и средах программирования.

55
00:08:14,760 --> 00:08:23,760
Регулярные выражения понимают множество специальных символов:

56
00:08:23,760 --> 00:08:28,480
. -- означает любой отдельный символ.

57
00:08:28,480 --> 00:08:41,680
[...] с каким-то набором символов внутри -- любой символ из этого набора.

58
00:08:41,680 --> 00:08:51,140
[^...] в этом случае -- любой отдельный символ не из этого класса символов.

59
00:08:51,140 --> 00:08:58,960
^ -- начало строки
$ -- конец строки

60
00:08:58,960 --> 00:09:04,080
* -- означает повторение.

61
00:09:04,080 --> 00:09:15,320
Это означает повторение чего-либо из этого ноль или более раз.

62
00:09:15,320 --> 00:09:18,620
\? -- одиночный символ.

63
00:09:18,620 --> 00:09:28,220
\+ -- одно или несколько повторений чего-либо.

64
00:09:28,220 --> 00:09:36,170
Основным ограничением утилиты `more`
 является движение по тексту только вперед.

65
00:09:36,170 --> 00:09:44,810
Чтобы решить эту проблему, было разработано
 улучшенное `more` (больше), названное `less` (меньше).

66
00:09:44,810 --> 00:09:53,930
Утилита `less` буферизует стандартный ввод,
 и мы можем перемещаться вперед и назад по буферу,

67
00:09:53,930 --> 00:10:03,019
например, с помощью курсора и клавиш PgUp/PgDown.

68
00:10:03,019 --> 00:10:12,749
Возможен поиск в обратном направлении при помощи знака "?".

