1
00:00:06,100 --> 00:00:13,250
В UNIX поддерживается стандартный набор команд
 для работы с файлами и каталогами:

2
00:00:13,250 --> 00:00:18,160
* ls -- список содержимого каталога:

3
00:00:18,160 --> 00:00:21,570
$ man ls

4
00:00:21,570 --> 00:00:36,180
Мы можем просто указать файлы и каталоги
 в качестве аргументов и просматривать список

5
00:00:36,180 --> 00:00:39,460
различными способами в соответствии с указанными параметрами.

6
00:00:39,460 --> 00:00:55,249
Итак, давайте посмотрим на наш текущий каталог --
 домашний каталог после входа в систему.

7
00:00:55,249 --> 00:01:11,549
Это просто `ls` без аргументов. Как мы помним,
 после авторизации мы попадаем

8
00:01:11,549 --> 00:01:13,530
в домашний каталог.

9
00:01:13,530 --> 00:01:14,530
$ ls

10
00:01:14,530 --> 00:01:29,750
Мы видим некоторые каталоги, но не видим, например,
 стартовых файлов shell. Не проблема --

11
00:01:29,750 --> 00:01:32,500
давайте запустим:

12
00:01:32,500 --> 00:01:37,250
$ ls -a

13
00:01:37,250 --> 00:01:49,369
Мы видим файлы запуска оболочки и многое другое,
 также нам стали видны каталоги «точка» (текущий)

14
00:01:49,369 --> 00:01:58,829
 и «две точки» (верхний уровень). Потому что это означает
 «all» (все) файлы и каталоги, включая скрытые.

15
00:01:58,829 --> 00:02:09,460
Скрытые файлы в UNIX -- это просто соглашение об именах --
 имена должны начинаться с «точки».

16
00:02:09,460 --> 00:02:21,250
Это не атрибут, как в системах Microsoft.
 Изначально это была просто некая

17
00:02:21,250 --> 00:02:33,280
уловка в утилите `ls`, чтобы не отображать без необходимости
 текущий и верхний каталоги. А затем это стало

18
00:02:33,280 --> 00:02:39,800
использоваться в качестве соглашения об именах,
 чтобы скрыть любой файл или каталог.

19
00:02:39,800 --> 00:02:45,670
Также мы можем получить листинг вложенных каталогов:

20
00:02:45,670 --> 00:02:50,560
$ ls -R

21
00:02:50,560 --> 00:02:57,150
Другой очень важный параметр -- это "long list" (длинный список):

22
00:02:57,150 --> 00:03:00,300
$ ls -l

23
00:03:00,300 --> 00:03:07,630
Мы видим таблицу с информацией

24
00:03:07,630 --> 00:03:17,100
о файле/каталоге в соответствующих строках.
Первый столбец -- это атрибут файла.

25
00:03:17,100 --> 00:03:34,230
Где первая буква -- это тип файла:
 «тире» -- это обычный файл, «d» -- это каталог

26
00:03:34,230 --> 00:03:45,100
и так далее. Затем мы можем увидеть разрешения
 на чтение, запись и выполнение для трех групп пользователей:

27
00:03:45,100 --> 00:03:59,790
владельца, группы владельцев и других.
 И снова мы видим разницу между UNIX и Microsoft.

28
00:03:59,790 --> 00:04:10,890
В первом случае исполняемость -- это атрибут,
 во втором -- просто соглашение об именах:

29
00:04:10,890 --> 00:04:23,040
'.com', '.exe', '.bat'. Второй -- некий загадочный столбец  --
 «счетчик ссылок на файл»,

30
00:04:23,040 --> 00:04:29,540
который мы обсудим позже при рассмотрении  "links" (ссылок).

31
00:04:29,540 --> 00:04:44,910
Затем мы можем увидеть владельца и группу владельцев, размер файла,
 время (по умолчанию -- время модификации)

32
00:04:44,910 --> 00:04:50,430
и имя файла.

33
00:04:50,430 --> 00:05:02,900
* `pwd` -- вывести имя текущего/рабочего каталога
* `cd` -- сменить каталог. Без аргументов --

34
00:05:02,900 --> 00:05:11,410
в домашнюю папку.
* `cp` -- копировать файлы и каталоги

35
00:05:11,410 --> 00:05:23,250
$ man cp

36
00:05:23,250 --> 00:05:28,350
Самая интересная опция это '-a | --archive'

37
00:05:28,350 --> 00:05:44,760
для создания рекурсивной копии архива
 с сохранением разрешений, временных меток и т.д.

38
00:05:44,760 --> 00:05:58,810
* `mv` -- переместить (переименовать) файлы и каталоги.
* `rm` -- удалить файлы или каталоги.

39
00:05:58,810 --> 00:06:06,669
rm -rf что-то...

40
00:06:06,669 --> 00:06:11,140
означает рекурсивное удаление без запроса подтверждения.

41
00:06:11,140 --> 00:06:23,730
* `mkdir` -- создание каталога. Если какой-либо из родительских

42
00:06:23,730 --> 00:06:27,490
каталогов не существует, вы получите сообщение об ошибке:

43
00:06:27,490 --> 00:06:39,040
$ mkdir a/b/c
mkdir: cannot create directory 'a/b/c': No such file or directory`

44
00:06:39,040 --> 00:06:44,780
Чтобы избежать этого, мы можем использовать параметр `-p`:

45
00:06:44,780 --> 00:06:49,690
$ mkdir -p a/b/c

46
00:06:49,690 --> 00:07:00,220
Теперь ошибка не возникает, если каталог существует, и при необходимости создаются все необходимые родительские каталоги.

47
00:07:00,220 --> 00:07:10,190
* `rmdir` -- удалить пустые каталоги.

48
00:07:10,190 --> 00:07:20,540
Если каталог не пустой, вы получите сообщение об ошибке.
 В настоящее время в этом случае достаточно

49
00:07:20,540 --> 00:07:28,060
запустить `rm -rf` . Но в старые времена,
 когда у `rm` не было рекурсивной опции,

50
00:07:28,060 --> 00:07:35,940
для очистки непустых каталогов приходилось создавать
 сценарий оболочки с `rm`ами в каждом подкаталоге

51
00:07:35,940 --> 00:07:52,000
и затем соответствующим `rmdir`ами.
* `ln` -- "link" (ссылка) создает ссылки между файлами.

52
00:07:52,000 --> 00:08:02,510
Ссылки -- это довольно специфический тип файлов в UNIX,
 и мы обсудим их более подробно.

53
00:08:02,510 --> 00:08:08,300
Если мы посмотрим на страницу `man` для команды `ln`:

54
00:08:08,300 --> 00:08:09,500
$ man ln

55
00:08:09,500 --> 00:08:27,930
мы увидим команду, очень похожую на 'cp'.
 Но давайте посмотрим внимательнее:

56
00:08:27,930 --> 00:08:59,800
$ cat > a # Control-D - конец файла
$ ln -s a b
$ ln a c
$ cat b; cat c

57
00:08:59,810 --> 00:09:09,339
Пока это выглядит как обычная копия файла, но попробуем

58
00:09:09,339 --> 00:09:16,730
что-нибудь изменить в одном из них:

59
00:09:16,730 --> 00:09:27,440
$ cat >> c cat a; cat b

60
00:09:27,440 --> 00:09:35,420
Ого, все остальные связанные файлы тоже изменились!

61
00:09:35,420 --> 00:09:44,370
Мы просто смотрим на один и тот же файл с разных точек,
 и изменение одного из них изменит все остальные. 

62
00:09:44,370 --> 00:09:56,389
И в этом все они кажутся похожими.

63
00:09:56,389 --> 00:09:58,769
 Но попробуем удалить исходный файл:

64
00:09:58,769 --> 00:10:04,790
$ rm a cat b; cat c

65
00:10:04,790 --> 00:10:10,829
В первом случае мы все еще видим содержимое

66
00:10:10,829 --> 00:10:19,200
исходного файла, но во втором случае мы видим сообщение об ошибке.
 Просто потому, что первая --

67
00:10:19,200 --> 00:10:31,040
это так называемая жесткая ссылка, а вторая --
 мягкая или символическая ссылка. Мы можем увидеть

68
00:10:31,040 --> 00:10:40,850
разницу между ними в длинном списке ls

69
00:10:40,850 --> 00:10:44,130
$ ls -l ?

70
00:10:44,130 --> 00:10:56,639
И мы можем восстановить доступ к содержимому для символической ссылки,

71
00:10:56,639 --> 00:10:59,470
просто воссоздав исходный файл:

72
00:10:59,470 --> 00:11:09,069
$ ln b a
$ cat c

73
00:11:09,069 --> 00:11:13,189
Еще одно различие между ними -- невозможность

74
00:11:13,189 --> 00:11:19,921
создания жесткой связи между разными  файловыми системами и возможность такой привязки для программных ссылки. 

75
00:11:19,921 --> 00:11:31,680
Подробнее о внутренней перелинковке

76
00:11:31,680 --> 00:11:34,240
читайте в соответствующей лекции «Под капотом».

77
00:11:35,240 --> 00:11:48,079
И наконец, давайте обсудим права доступа к файлам. Как мы помним,
 у нас есть разрешения на чтение, запись и выполнение

78
00:11:48,079 --> 00:11:56,709
для пользователя-владельца, группы владельцев и других.
 И у нас есть соответствующая команда

79
00:11:56,709 --> 00:12:10,420
для изменения этих разрешений -- `chmod`:
$ man chmod

80
00:12:10,420 --> 00:12:37,340
Устанавливаются или снимаются эти разрешения
 для таких групп пользователей символьными режимами.

81
00:12:37,340 --> 00:12:47,550
Насколько мы понимаем, разрешения -- это просто битовое поле,
 и в некоторых случаях может быть более удобно

82
00:12:47,550 --> 00:12:53,980
устанавливать их в восьмеричном режиме -- см. нашу лекцию «Под капотом»

83
00:12:53,980 --> 00:12:57,329
с более подробной информацией об этом.

84
00:12:57,329 --> 00:13:07,749
Вы также можете изменить владельца и группу
 для файла или каталога с помощью команды chown.

85
00:13:07,749 --> 00:13:22,240
$ man chown
Итак, вы должны установить владельца файла
 и владельца группы для файла или каталога.

86
00:13:22,240 --> 00:13:26,720
Возможно -- рекурсивно.

87
00:13:26,720 --> 00:13:32,010
Но имейте в виду -- по соображениям безопасности только

88
00:13:32,010 --> 00:13:41,610
привилегированный пользователь (суперпользователь root)
 может изменить владельца файла. Обычный владелец

89
00:13:41,610 --> 00:13:50,719
может изменить группу файлов на любую группу,
 членом которой является владелец.

90
00:13:50,719 --> 00:13:55,889
С помощью такой команды:
$ chown: group file ...

91
00:13:55,889 --> 00:14:01,049
или такой:
$ chgrp group file ...

