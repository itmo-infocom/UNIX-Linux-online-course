1
00:00:05,440 --> 00:00:12,960
Давайте, наконец, обсудим третий столп,
 на котором зиждется весь UNIX-мир -- файлы.

2
00:00:13,920 --> 00:00:23,520
Для упрощения работы пользователей, не знакомых с работой

3
00:00:23,520 --> 00:00:31,520
с командной строкой, существует ряд свободно доступных
 интерфейсов управления файлами, таких как, например,

4
00:00:40,560 --> 00:00:46,800
Midnight Commander (mc), напоминающий Norton Commander,

5
00:00:48,240 --> 00:00:54,480
или графические файловые менеджеры,
 более или менее похожие на Windows Explorer.

6
00:00:55,280 --> 00:01:05,360
Но мы поглядим, как можно работать с файлами и каталогами
 из интерфейса командной строки или сценариев.

7
00:01:10,720 --> 00:01:25,840
Во-первых, давайте взглянем на некоторые символы,
 которые имеют особый смысл при описании пути к файлу:

8
00:01:25,840 --> 00:01:32,720
/ -- корневой каталог и разделитель каталогов

9
00:01:32,720 --> 00:01:42,480
. -- текущий каталог
.. -- родительский каталог

10
00:01:44,480 --> 00:01:51,200
~ / -- домашний каталог

11
00:01:51,200 --> 00:01:52,080
Как мы можем заметить,

12
00:01:52,880 --> 00:02:04,800
UNIX использует "slash" (косую черту) в качестве разделителя каталогов,
 в то время как Windows использует "backslash" (обратную косую черту).

13
00:02:07,760 --> 00:02:16,480
Это занятно, поскольку ранние версии операционных систем Microsoft MSDOS

14
00:02:18,400 --> 00:02:23,120
не поддерживали подкаталоги по той причине, что это был клон

15
00:02:30,720 --> 00:02:45,200
CP/M ОС от Digital Research. Это была небольшая ОС
 для 8-битных микрокомпьютеров без дискового накопителя

16
00:02:45,200 --> 00:02:56,320
или с небольшой дискетой. Обычно на гибких дисках
 было всего несколько десятков файлов,

17
00:02:56,320 --> 00:03:04,240
и поддерживалась только плоская файловая система
 с одним каталогом на всю файловую систему.

18
00:03:04,240 --> 00:03:12,080
И изначально операционные системы Microsoft MSDOS
 не поддерживали подкаталоги.

19
00:03:13,040 --> 00:03:22,640
Только при разработке собственной
 «многопользовательской» ОС -- «Xenix» на базе UNIX

20
00:03:22,640 --> 00:03:34,800
Microsoft реализовала иерархическую файловую систему
 и перенесла ее в «однопользовательскую» MSDOS. Но в этот момент

21
00:03:34,800 --> 00:03:47,280
косая черта уже была занята -- она ​​использовалась
 как стандартный маркер параметра команды CP/M,

22
00:03:47,280 --> 00:03:54,880
как «тире» в командах UNIX. И Microsoft выбрала
 «обратную косую черту» в качестве маркера каталога.

23
00:03:56,080 --> 00:04:07,040
ОК. Как мы помним, у нас есть иерархическая
 файловая система с одним корневым каталогом,

24
00:04:09,120 --> 00:04:17,360
и для новичков эта иерархия файловой системы
 может показаться слишком сложной.

25
00:04:20,080 --> 00:04:25,200
Они говорят: «Когда мы устанавливаем какое-то
 программное обеспечение в Windows,

26
00:04:25,200 --> 00:04:34,000
у нас есть отдельные каталоги для каждого продукта,
 и нам довольно легко там что-то найти,

27
00:04:35,040 --> 00:04:42,320
но в вашей системе мы не знаем, куда податься».

28
00:04:42,320 --> 00:04:51,760
Но на самом деле в UNIX-подобных системах существует
 довольно четкий и стабильный стандарт

29
00:04:52,640 --> 00:05:06,320
иерархии файловой системы, который отражен,
 например, в соответствующей спецификации Linux

30
00:05:06,320 --> 00:05:08,320
"Filesystem Hierarchy Standard" (Стандарт иерархии файловой системы).

31
00:05:11,440 --> 00:05:18,800
Фактически, у нас есть три основных уровня
 с повторяющейся структурой каталогов.

32
00:05:19,600 --> 00:05:26,880
На первом уровне у нас есть такие каталоги:

33
00:05:31,600 --> 00:05:38,720
* каталог /bin с основными двоичными файлами команд. У нас есть "бут"

34
00:05:38,720 --> 00:05:51,740
* '/boot' с файлами для загрузки
* 'dev' для файлов устройств.

35
00:05:51,740 --> 00:06:00,960
* '/etc' где помещаются файлы конфигурации данной системы.

36
00:06:00,960 --> 00:06:13,800
* '/lib' для общих системных библиотек и модулей ядра.

37
00:06:13,800 --> 00:06:26,860
* каталоги '/media' и '/mnt' -- точки монтирования чего-либо.

38
00:06:26,860 --> 00:06:38,600
* У нас есть '/opt'. Фактически это аналог 'Products' в системах Microsoft.

39
00:06:38,600 --> 00:06:51,740
В этом каталоге мы видим сторонние программы,
 установленные в нашей системе.

40
00:06:51,740 --> 00:06:57,600
* '/sbin' -- основные бинарные файлы для системного администратора

41
00:06:57,600 --> 00:07:04,000
* '/tmp' -- каталог для временных файлов

42
00:07:04,000 --> 00:07:12,000
* '/usr' - второй уровень иерархии

43
00:07:12,000 --> 00:07:17,200
* '/var' -- каталог для меняющихся данных

44
00:07:17,200 --> 00:07:26,400
И, наконец, '/root' и '/home' -- домашние каталоги
 для суперпользователя root и других пользователей.

45
00:07:26,400 --> 00:07:44,220
В каталогах '/usr' и '/usr/local' мы снова видим подобные каталоги.

46
00:07:44,222 --> 00:07:45,120
Кроме того, как я уже говорил,

47
00:07:49,120 --> 00:07:52,960
устройства в UNIX-подобных системах выглядят как файлы,

48
00:07:55,600 --> 00:08:01,320
но как специальные файлы, помещенные в специальный каталог '/dev'.

49
00:08:01,320 --> 00:08:21,000
Например: '/dev/null', в котором при записи исчезает все, что туда отправляется. При этом нам просто возвращается успешный код завершения.

50
00:08:21,000 --> 00:08:27,200
Во время чтения мы получаем EOF.

51
00:08:27,200 --> 00:08:40,520
'/dev/zero' работает как '/dev/null' при записи,
 а при чтении возвращает только символы NULL.

52
00:08:40,520 --> 00:08:48,060
Мы можем использовать этот файл как генератор нулей.

53
00:08:48,060 --> 00:08:53,300
'/dev/mem' -- это просто ОЗУ нашего компьютера

54
00:08:53,300 --> 00:08:58,360
'/dev/tty' -- терминальные линии

55
00:08:58,360 --> 00:09:09,520
'/dev/sd' - это наши жесткие диски

56
00:09:09,520 --> 00:09:21,200
И по сути дела такой файл представляет собой кроличью нору
 для доступа к ядру ОС. При работе с псевдо-файлом

57
00:09:21,200 --> 00:09:35,840
в этом каталоге мы видим это устройство как поток байтов
 и работаем с ним как с обычным файлом.

58
00:09:35,840 --> 00:09:49,200
Дополнительную информацию вы можете найти в лекции «Под капотом -- о драйверах устройств».

59
00:09:49,200 --> 00:10:03,840
Также мы можем использовать и другие пути к внутренним компонентам ядра,

60
00:10:07,440 --> 00:10:18,403
например, через каталоги /proc и /sys. Например, мы можем увидеть в:

61
00:10:18,403 --> 00:10:22,720
$ less /proc/cpuinfo

62
00:10:22,720 --> 00:10:27,040
информацию о процессорах на нашем компьютере,

63
00:10:27,040 --> 00:10:32,902
включая аппаратные "ошибки"

64
00:10:32,902 --> 00:10:41,040
$ less /proc/meminfo

65
00:10:41,040 --> 00:10:49,200
информацию об использовании памяти
 (включая пространство подкачки)

66
00:10:55,040 --> 00:11:00,043
и даже прерывания:

67
00:11:00,043 --> 00:11:01,804
$ less /proc/interrupts

