1
00:00:06,460 --> 00:00:07,460
ОК.

2
00:00:07,460 --> 00:00:11,340
Но как насчет современного мира Интернета?

3
00:00:11,340 --> 00:00:26,410
Основная проблема всех этих классических инструментов
 типа `telnet` и `ftp` -- небезопасность: пользователь и пароль

4
00:00:26,410 --> 00:00:39,220
передаются по сети в виде простого текста
 и могут быть перехвачены злоумышленником.

5
00:00:39,220 --> 00:00:51,040
Сегодня их практически заменили утилиты Secure Shell.

6
00:00:51,040 --> 00:01:01,520
Secure Shell обеспечивает безопасную зашифрованную связь
 между недоверенными хостами в незащищенной сети.

7
00:01:01,520 --> 00:01:08,539
И опять -- у нас есть удаленная оболочка и инструмент для передачи данных:

8
00:01:08,539 --> 00:01:28,979
* `ssh` -- клиент SSH (для удаленного входа в систему
 и выполнения программы)
* и `scp` -- secure copy (программа удаленного копирования файлов)

9
00:01:28,979 --> 00:01:32,109
$ man ssh

10
00:01:32,109 --> 00:01:38,999
В `ssh` вы должны указать хост и, если есть надобность, --

11
00:01:38,999 --> 00:01:48,440
пользователя и порт.

12
00:01:48,440 --> 00:01:58,409
Если вы не укажете пользователя, по умолчанию вы будете
 входить в систему с тем именем, под которым

13
00:01:58,409 --> 00:01:59,619
вы вошли на локальной машине.

14
00:01:59,619 --> 00:02:12,760
В качестве альтернативы вы можете добавить команду,
 если хотите удаленно запускать ее прямо в командной строке.

15
00:02:12,760 --> 00:02:22,530
Без этого `ssh` просто запустит интерактивный сеанс shell на удаленном хосте.

16
00:02:22,530 --> 00:02:31,940
`scp` копирует файлы между хостами в сети.

17
00:02:31,940 --> 00:02:44,200
Он использует ту же аутентификацию
 и обеспечивает ту же безопасность, что и ssh,

18
00:02:44,200 --> 00:02:46,750
а также шифрует передачу данных по ssh.

19
00:02:46,750 --> 00:03:18,760
Вы также можете выбрать порт, вы можете использовать
 сжатие при передаче с помощью опции "-C".

20
00:03:18,760 --> 00:03:26,800
Утилиты Secure Shell можно настроить для аутентификации
 без пароля с использованием сертификатов.

21
00:03:29,110 --> 00:03:40,870
Наконец, есть много инструментов, которые можно использовать
 для неинтерактивного доступа к сетевым ресурсам

22
00:03:40,870 --> 00:03:42,810
в сценариях.

23
00:03:42,810 --> 00:03:53,160
Во первых -- это текстовый веб-браузер `lynx`.

24
00:03:53,160 --> 00:04:03,300
С параметром «-dump» осуществляет текстовое форматирование
 WEB-ресурса по заданному  URL-адресу

25
00:04:03,300 --> 00:04:09,750
и выводит результат на стандартный вывод.

26
00:04:09,750 --> 00:04:20,570
Затем этот вывод можно использовать
 при обработке веб-страницы в сценарии.

27
00:04:20,570 --> 00:04:28,400
Также у нас есть неинтерактивные сетевые загрузчики -- `wget` и` curl`.

28
00:04:28,400 --> 00:04:35,689
Эти инструменты можно использовать для загрузки
 и зеркалирования онлайн-ресурсов в автономном режиме.

29
00:04:35,689 --> 00:04:44,729
`lftp` - продвинутая программа для передачи файлов
 с различными методами доступа -- FTP, FTPS,

30
00:04:44,729 --> 00:04:50,740
HTTP, HTTPS, HFTP, FISH, SFTP и file.

31
00:04:50,740 --> 00:04:58,770
И, наконец, `rsync` -- средство для удаленного (и локального)
 копирования файлов, которое минимизирует

32
00:04:58,770 --> 00:05:06,039
объём данных, отправляемых по сети,
 отправляя только различия между исходными файлами

33
00:05:06,039 --> 00:05:12,229
и файлами, уже наличествующими в месте назначения.

34
00:05:12,229 --> 00:05:21,120
Rsync широко используется для резервного копирования и зеркалирования,
 а также в качестве продвинутой команды копирования

35
00:05:21,120 --> 00:05:22,120
для повседневного использования.

36
00:05:22,120 --> 00:05:30,139
Существует два разных способа связи `rsync`
 с удаленной системой: использование удаленного shell

37
00:05:30,139 --> 00:05:43,180
в качестве транспорта (например, `ssh` или `rsh`)
 или прямое обращение к демону `rsync` через TCP.

