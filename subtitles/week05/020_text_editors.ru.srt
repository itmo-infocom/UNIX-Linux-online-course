1
00:00:06,300 --> 00:00:07,300
ОК.

2
00:00:07,300 --> 00:00:17,520
Мы можем создать файл с помощью утилиты `cat`
 и просмотреть файл с помощью программы просмотра, например,`less`.

3
00:00:17,520 --> 00:00:29,210
Но что, если нам нужно что-то изменить,
 особенно если у нас есть только TTY-интерфейс?

4
00:00:29,210 --> 00:00:43,550
И это возможно -- у нас есть так называемый
 строковый редактор под названием `ed`.

5
00:00:43,550 --> 00:00:50,740
Единственный интерфейс для такого редактора -- это командная строка.

6
00:00:50,740 --> 00:00:59,480
У нас есть механизмы для выбора позиции в файле

7
00:00:59,480 --> 00:01:01,480
и команды для работы с текстовыми данными в файле.

8
00:01:10,319 --> 00:01:14,800
Итак, попробуем отредактировать новый файл.

9
00:01:14,801 --> 00:01:24,030
Сначала вставим несколько строк командой `insert`:

10
00:01:24,030 --> 00:01:34,740
i
1 2
3 4
.

11
00:01:34,749 --> 00:01:42,530
и мы должны закончить наш ввод точкой

12
00:01:42,530 --> 00:01:51,250
в начале строки.

13
00:01:52,250 --> 00:01:55,030
Давайте посмотрим на наш файл,

14
00:01:55,030 --> 00:01:56,740
перейдя к первой строке:

15
00:01:56,740 --> 00:02:03,880
1
1 2
3 4
?

16
00:02:03,890 --> 00:02:05,350
Выглядит неплохо.

17
00:02:05,350 --> 00:02:16,360
Теперь мы можем добавить что-нибудь в конец с помощью команды `add`:

18
00:02:16,360 --> 00:02:21,440
a
5 6
.

19
00:02:21,450 --> 00:02:26,540
1
1 2
3 4
5 6
?

20
00:02:26,540 --> 00:02:34,320
И давайте еще раз посмотрим

21
00:02:34,320 --> 00:02:42,060
ОК -- теперь у нас в файле 3 строки.

22
00:02:42,060 --> 00:02:53,100
И напоследок -- попробуем сделать магический пасс:

23
00:02:53,100 --> 00:03:22,340
1,$s/\(.\) \(.\)/\2 \1/
1
2 1
4 3
6 5
?

24
00:03:22,340 --> 00:03:38,660
Это означает: от первой до последней строки заменить строки,
 в которых у нас есть две отдельные буквы,

25
00:03:38,660 --> 00:03:56,070
разделенные пробелом, и поменять эти буквы местами.

26
00:03:56,070 --> 00:04:01,240
И, наконец, давайте выполним 'write' (запись) и 'quit' (выход):

27
00:04:01,240 --> 00:04:05,760
w
q

28
00:04:05,760 --> 00:04:06,999
Давайте проверим результат:

29
00:04:06,999 --> 00:04:09,620
$ cat tst

30
00:04:09,620 --> 00:04:12,240
2 1
4 3
6 5

31
00:04:12,240 --> 00:04:13,240
OK

32
00:04:13,240 --> 00:04:23,711
Но для каких целей мы можем использовать строковый редактор
 в наше время, когда у нас есть полноэкранные редакторы

33
00:04:23,711 --> 00:04:26,790
с дружественными пользовательскими интерфейсами?

34
00:04:26,790 --> 00:04:38,300
Конечно, вы можете представить себе ситуацию,
 когда у нас какие-то проблемы с полноэкранным отображением

35
00:04:38,300 --> 00:04:45,100
и только строковый редактор станет для вас спасением.

36
00:04:45,100 --> 00:04:48,970
И вообще, с такими ситуациями приходилось сталкиваться в жизни.

37
00:04:48,970 --> 00:05:02,960
Но основное применение `ed` -- автоматическое редактирование,
 которое можно использовать в скриптах.

38
00:05:02,960 --> 00:05:13,240
Любое изменение текстовых данных
 можно сделать этим редактором, 

39
00:05:13,240 --> 00:05:17,360
включая сложный поиск и замену с помощью регулярных выражений.

40
00:05:17,360 --> 00:05:28,350
Кроме того, у нас есть потоковый редактор `sed`
 для редактирования текстовых данных через конвейер:

41
00:05:28,350 --> 00:05:36,040
$ sed 's/\(.\) \(.\)/\2 \1/' < tst

42
00:05:36,040 --> 00:05:45,280
1 2
3 4
5 6

43
00:05:45,280 --> 00:05:52,419
Как видите, исходный файл не изменяется,
 все изменения просто отправляются на стандартный вывод,

44
00:05:52,419 --> 00:05:53,419
и мы, в свою очередь, можем перенаправить его в другой файл.

45
00:05:53,419 --> 00:06:00,720
$ cat tst
2 1
4 3
6 5

46
00:06:00,730 --> 00:06:08,639
Но в UNIX-подобных системах также есть полноэкранные редакторы,

47
00:06:08,639 --> 00:06:15,350
которые подчас тоже могут сбивать с толку новичков.

48
00:06:15,350 --> 00:06:19,240
Первый из них -- это редактор `vi`.

49
00:06:19,240 --> 00:06:32,970
Он был разработан студентом Беркли Биллом Джоем
 для BSD изначально как визуальный режим

50
00:06:32,970 --> 00:06:35,669
для строкового редактора.

51
00:06:35,669 --> 00:06:43,330
Это очень быстрый и легкий редактор,
 который является частью единой спецификации

52
00:06:43,330 --> 00:06:47,350
Unix и POSIX, которые можно найти во всех UNIX-подобных системах.

53
00:06:47,350 --> 00:06:56,860
Редактор VI работает на всех типах терминалов
 и обычно требует только обычной

54
00:06:56,860 --> 00:06:59,729
буквенной клавиатуры.

55
00:06:59,729 --> 00:07:11,620
Вы можете работать с ним без клавиш со стрелками,
 PgUp/Down или чего-либо подобного.

56
00:07:11,620 --> 00:07:22,210
На самом деле некоторые производители даже делают
 минимизированные клавиатуры, оптимизированные для vi.

57
00:07:22,210 --> 00:07:36,520
Но чтобы работать с ним, вам нужно понять
 основную концепцию этого редактора --

58
00:07:36,520 --> 00:07:38,810
он может пребывать в трех состояниях.

59
00:07:38,810 --> 00:07:53,740
Сразу после запуска мы попадаем
 в обычный командный режим и можем перейти

60
00:07:53,740 --> 00:08:05,300
в режим редактирования, например, нажав клавишу «Insert» или «i».

61
00:08:05,300 --> 00:08:14,980
Как мы видим, статус режима в левом нижнем углу
 изменился на '-- INSERT --' (ВСТАВКА),

62
00:08:14,980 --> 00:08:27,440
и теперь мы можем редактировать наш файл.

63
00:08:27,440 --> 00:08:43,909
Повторное нажатие «Insert» переведёт нас в режим
'-- REPLACE --' (ЗАМЕНА)

64
00:08:43,909 --> 00:08:45,679
и наоборот.

65
00:08:45,679 --> 00:08:53,119
Выйдите из режима редактирования, нажав ESC.

66
00:08:53,119 --> 00:09:07,569
К третьему режиму можно перейти, нажав клавишу
 «двоеточие» в командном режиме.

67
00:09:07,569 --> 00:09:13,369
Это хорошо известный нам режим `ed`.

68
00:09:13,369 --> 00:09:22,010
В этом режиме мы можем использовать обычные команды
 редактора строк `ed` и завершить их нажатием ENTER.

69
00:09:22,010 --> 00:09:34,899
В командном режиме вы можете найти что-то
 с регулярным выражением по запросам '/' и '?',

70
00:09:34,899 --> 00:09:37,029
как в программе просмотра `less`.

71
00:09:37,029 --> 00:09:54,189
В улучшенном VI (vim) вы можете использовать
 очень полезный визуальный режим, нажав V.

72
00:09:54,189 --> 00:10:05,610
После этого вы можете удалить выделение с помощью клавиши 'd'
 или просто скопировать его с помощью 'y' (yank).

73
00:10:05,610 --> 00:10:11,850
Затем вы можете вставить его куда угодно с помощью 'p' (paste).

74
00:10:11,850 --> 00:10:35,430
Кроме того, вы можете использовать Ctrl-V
 для выделения вертикальных блоков.

75
00:10:35,430 --> 00:10:46,110
Чтобы выйти из визуального режима, просто нажмите ESC.

76
00:10:46,110 --> 00:10:58,509
Также вы можете заглянуть в `vimtutor` -- руководство по Vim,
 которое может быть полезно новичкам.

77
00:10:58,509 --> 00:11:05,100
Второй по распространенности редактор -- `emacs`.

78
00:11:05,100 --> 00:11:14,709
Этот редактор Ричарда Столлмана стал отправной точкой
 для проекта GNU, наряду с GCC

79
00:11:14,709 --> 00:11:17,240
и UNIX-подобными утилитами.

80
00:11:17,240 --> 00:11:22,899
EMACS означает, к примеру, "Editing MACroS".

81
00:11:22,899 --> 00:11:34,910
Апокрифический хакерский коан утверждает,
 что программа была названа в честь Emack&Bolio's,

82
00:11:34,910 --> 00:11:39,180
популярного магазина мороженого в Кембридже.

83
00:11:39,180 --> 00:11:52,019
Но в целом это действительно очень мощный редактор
 с макро-расширениями, позволяющий пользователю

84
00:11:52,019 --> 00:11:58,579
переназначать любые сочетания клавиш
 для выполнения функций редактора.

85
00:11:58,579 --> 00:12:13,350
Но, в отличие от других редакторов, поддерживающих макро-расширения,
 в Emacs они реализованы с использованием языка программирования LISP,

86
00:12:13,350 --> 00:12:16,360
встроенного в редактор.

87
00:12:16,360 --> 00:12:25,910
В то время LISP был очень популярен в исследованиях
 по искусственному интеллекту в США.

88
00:12:25,910 --> 00:12:36,049
 И Столлман, который работал в лаборатории искусственного интеллекта Массачусетского технологического института,
 выбрал его в качестве языка расширения редактора.

89
00:12:36,049 --> 00:12:46,220
Эта реализация позволяет разрабатывать
 множество приложений на основе LISP,

90
00:12:46,220 --> 00:12:54,309
включая удобный интерфейс для разработчиков
 на различных языках программирования.

91
00:12:54,309 --> 00:13:01,920
Как правило Emacs выглядит как текстовый редактор
 с обычным графическим интерфейсом.

92
00:13:01,920 --> 00:13:10,399
Но его можно запускать и в исключительно текстовом окружении.

93
00:13:10,399 --> 00:13:15,399
Наиболее часто используемые комбинации клавиш:

94
00:13:15,399 --> 00:13:24,009
C-c C-x -- выход
C-h t -- обучающая

95
00:13:24,009 --> 00:13:27,089
C-h i -- info

96
00:13:27,089 --> 00:13:42,689
Если чувствуете себя перегруженным сложностями `Emacs`,
 вы можете обратиться к личному психоаналитику:

97
00:13:42,689 --> 00:13:45,149
M-x doctor

98
00:13:45,149 --> 00:13:50,430
Что бы не портить удовольствие и не вредить процессу исцеления

99
00:13:50,430 --> 00:13:56,079
не будем тут слишком много распространяться о механизмах работы doctor'а.

100
00:13:56,079 --> 00:14:06,359
Но когда вы будете морально готовы, вы можете
 попытаться найти известную в мире ИИ

101
00:14:06,359 --> 00:14:11,370
программу ELIZA, связанную с тестом Тьюринга, в WikiPedia.

102
00:14:11,370 --> 00:14:20,429
Кроме того, в мире UNIX/Linux есть много других редакторов,
 которые возможно покажутся вам более удобными.

103
00:14:20,429 --> 00:14:30,839
Например:
* joe, nano, mcedit -- простые текстовые редакторы

104
00:14:30,839 --> 00:14:38,420
или
* gedit, kate - текстовые редакторы

105
00:14:38,420 --> 00:14:42,959
из проектов Gnome и KDE GUI.

