1
00:00:05,140 --> 00:00:14,280
Shell поддерживает особый вид ресурса, который называется
 переменные окружения (environment variables).

2
00:00:14,280 --> 00:00:22,930
Переменные представляют собой пару ИМЯ/ЗНАЧЕНИЕ.

3
00:00:22,930 --> 00:00:32,439
Имя начинается с буквы и может включать в себя
 буквы, цифры и символ подчеркивания.

4
00:00:32,439 --> 00:00:38,990
Значения переменных могут быть только одного типа -- символьные строки.

5
00:00:38,990 --> 00:00:42,739
Имена и значения чувствительны к регистру.

6
00:00:42,739 --> 00:00:54,360
Как мы увидим далее, переменные могут быть глобальными
 и локальными, как и в обычных языках программирования.

7
00:00:54,360 --> 00:01:11,939
Для получения значения переменной в Shell'е
 следует предварить имя переменной знаком доллара.

8
00:01:17,369 --> 00:01:26,259
Если переменная не установлена, будет возвращена пустая строка.

9
00:01:31,309 --> 00:01:44,740
Оператор присвоения (знак равно) устанавливает значение переменной
 (в случае Bourne-подобных оболочек),

10
00:01:50,249 --> 00:02:04,109
или встроенный оператор 'set' (в случае Си-подобных интерпретаторов).

11
00:02:05,229 --> 00:02:08,520
Проверить установленное значение можно, вызвав

12
00:02:08,520 --> 00:02:16,230
команду 'echo', которая просто распечатывает
 переданные ей аргументы на стандартный вывод (stdout).

13
00:02:18,969 --> 00:02:32,160
Команда 'set' без аргументов выводит значения всех переменных окружения.

14
00:02:37,840 --> 00:02:45,319
Команды оболочки могут быть объединены в командные файлы,

15
00:02:45,319 --> 00:02:55,799
называемые сценариями, где первая строка в виде
 специального комментария указывает, какой

16
00:02:55,799 --> 00:03:01,650
интерпретатор будет вызван для выполнения этого сценария.

17
00:03:01,650 --> 00:03:11,409
Давайте, к примеру, создадим файл, называемый 'test',
 в текстовом редакторе или просто при помощи команды 'cat'

18
00:03:11,409 --> 00:03:19,249
следующего содержания.

19
00:03:43,259 --> 00:03:50,439
Эта программа выводит текстовое сообщение "TEST:"

20
00:03:50,439 --> 00:04:00,590
и значение переменной TEST, если она установлена, на стандартный вывод.

21
00:04:00,590 --> 00:04:13,099
Вы можете запустить его из командной строки,
 передав как параметр командному интерпретатору.

22
00:04:16,480 --> 00:04:26,550
Мы видим текстовое сообщение, но не значение переменной.

23
00:04:26,550 --> 00:04:29,150
Но почему?

24
00:04:29,150 --> 00:04:34,550
Всё оттого, что мы запустили shell как новый процесс для исполнения скрипта.

25
00:04:34,550 --> 00:04:42,730
И в контексте данного shell'а эта переменная не установлена.

26
00:04:42,730 --> 00:04:43,830
Давайте установим.

27
00:04:43,830 --> 00:04:54,840
Для этого расширим наше определение на пространство
 переменных всех процессов, начиная с текущего shell'а.

28
00:05:09,550 --> 00:05:19,990
И, как мы можем видеть, значение переменной

29
00:05:19,990 --> 00:05:24,810
в нашем текущем shell также изменилось.

30
00:05:28,259 --> 00:05:32,520
Операция export глобализует

31
00:05:32,520 --> 00:05:34,319
нашу переменную.

32
00:05:34,319 --> 00:05:42,340
Вы можете получить настройки для таких
 глобальных экспортируемых переменных для сеанса,

33
00:05:42,340 --> 00:05:57,150
вызвав встроенную команду интерпретатора 'env' в случае
 интерпретаторов, подобных Борну (sh, ksh,

34
00:05:57,150 --> 00:06:04,050
bash, zsh, pdksh ...) и 'printenv' в случае C-Shell (csh, tcsh ...).

35
00:06:07,050 --> 00:06:19,190
Это первый пример использования

36
00:06:19,190 --> 00:06:31,980
механизма конвейера команд -- мы просто хотим найти
 переменную TEST в полном  выводе команды 'set'.

37
00:06:47,069 --> 00:07:00,050
Вы можете установить локальные значения для переменных,
 предварив вызов команды заданием переменной.

38
00:07:23,800 --> 00:07:35,330
Но, как мы видим, наши глобальные установки
 переменных остались прежними.

39
00:07:45,060 --> 00:07:50,199
Мы можем удалить переменные при помощи команды 'unset'.

40
00:08:03,870 --> 00:08:06,440
Как мы можем заметить, эта переменная также 

41
00:08:06,440 --> 00:08:10,720
удалилась и из глобального списка переменных окружения.

42
00:08:20,520 --> 00:08:27,160
И команды 'unexport' у нас нет -- только команда 'unset'.

43
00:08:27,160 --> 00:08:38,960
Ну и наконец, как и в случае с традиционными языками программирования,
 мы можем использовать скрипты shell как библиотеки,

44
00:08:38,960 --> 00:08:46,750
которые можно запускать из интерактивного сеанса оболочки
 или из другого скрипта, для того чтобы устанавливать

45
00:08:46,750 --> 00:08:52,030
переменные окружения или определить функции
 для процессов верхнего уровня.

46
00:08:52,030 --> 00:09:01,180
Давайте попробуем написать другой скрипт, в котором
 просто установим переменную TEST.

47
00:09:22,140 --> 00:09:33,450
Но для нашего первого скрипта эта переменная остается невидимой.

48
00:09:34,880 --> 00:09:36,840
Почему?

49
00:09:36,840 --> 00:09:43,960
По той причине, что она не проэкспортирована.

50
00:09:43,960 --> 00:09:48,750
Давайте проэкспортируем

51
00:10:07,870 --> 00:10:09,920
и запустим скрипт опять.

52
00:10:11,500 --> 00:10:14,650
Как мы можем видеть, в нашей главной сессии shell

53
00:10:14,650 --> 00:10:17,090
переменная так же изменилась.

