1
00:00:05,140 --> 00:00:14,280
The shell supports a special kind
of resource called environment variables.

2
00:00:14,280 --> 00:00:22,930
These variables are just a NAME/VALUE pair.

3
00:00:22,930 --> 00:00:32,439
The name can start with a letter and be composed
of letters, numbers, and underscores.

4
00:00:32,439 --> 00:00:38,990
Variable values have only one type --
character strings.

5
00:00:38,990 --> 00:00:42,739
Names and values are case sensitive.

6
00:00:42,739 --> 00:00:54,360
And, as we'll see, variables can be global and local,
just like in common programming languages.

7
00:00:54,360 --> 00:01:11,939
To get the value of a variable on the Shell,
precede the variable name with a dollar sign:

8
00:01:17,369 --> 00:01:26,259
If the variable is not set, an empty string
is returned:

9
00:01:31,309 --> 00:01:44,740
The assignment operator is used to set the value
of a variable (in the case of Bourne-like shells).

10
00:01:50,249 --> 00:02:04,109
or the built-in 'set' operator (in case
of C-like Shells).

11
00:02:05,229 --> 00:02:08,520
You can check your settings by calling the

12
00:02:08,520 --> 00:02:16,230
`echo` command, which simply sends its own
arguments to stdout.

13
00:02:18,969 --> 00:02:32,160
The `set` command with no arguments lists
the values of all variables set in the environment.

14
00:02:37,840 --> 00:02:45,319
Shell commands can be combined into command

15
00:02:45,319 --> 00:02:55,799
files called scripts, where the first line,
in a special kind of comment, specifies the

16
00:02:55,799 --> 00:03:01,650
shell to execute this script.

17
00:03:01,650 --> 00:03:11,409
For example, let's create a file called 'test'
in a text editor or just by command 'cat'

18
00:03:11,409 --> 00:03:19,249
with the following content.

19
00:03:43,259 --> 00:03:50,439
This program will print the text message "TEST:"

20
00:03:50,439 --> 00:04:00,590
and the value of the TEST variable, if this
one specified, to standard output.

21
00:04:00,590 --> 00:04:13,099
You can run it from the command line by passing
it as a parameter to the command interpreter:

22
00:04:16,480 --> 00:04:26,550
OK. We can see the text message,
but we didn't see the value of the variable.

23
00:04:26,550 --> 00:04:29,150
But why?

24
00:04:29,150 --> 00:04:34,550
Because we started a new shell process to
run the script.

25
00:04:34,550 --> 00:04:42,730
And we have not set this variable in the context
of this new shell.

26
00:04:42,730 --> 00:04:43,830
Let's do it.

27
00:04:43,830 --> 00:04:54,840
Okay, let's expand our definition to the environment
space of all processes started from our current shell:

28
00:05:09,550 --> 00:05:19,990
And, as we can see, the value of the variable

29
00:05:19,990 --> 00:05:24,810
in our current SHELL has also changed.

30
00:05:28,259 --> 00:05:32,520
The export operation is the globalization

31
00:05:32,520 --> 00:05:34,319
of our variable.

32
00:05:34,319 --> 00:05:42,340
You can get the settings for such global exported
variables for a session by calling the interpreter

33
00:05:42,340 --> 00:05:57,150
builtin command `env`, in the 
case of Bourne-like interpreters (sh, ksh,

34
00:05:57,150 --> 00:06:04,050
bash, zsh, pdksh ...), and `printenv` in the
case of the C-Shell style (csh, tcsh...).

35
00:06:07,050 --> 00:06:19,190
This is a first example of using the

36
00:06:19,190 --> 00:06:31,980
command pipeline machinery -- we just look
at only the TEST variable in the full 'set'.

37
00:06:41,039 --> 00:06:47,069
Variables can be local to a given process
or global to a session.

38
00:06:47,069 --> 00:07:00,050
You can set local values for variables by preceding
definition of variable before command calls.

39
00:07:23,800 --> 00:07:35,330
But, as we can see, our global settings are
the same.

40
00:07:45,060 --> 00:07:48,750
We can remove the setting of variables using

41
00:07:48,750 --> 00:07:50,199
the 'unset' command.

42
00:08:03,870 --> 00:08:06,440
As we can see, this variable has also been

43
00:08:06,440 --> 00:08:10,720
removed from the list of global environment
variables.

44
00:08:20,520 --> 00:08:25,280
And there is no "unexport" command -- just

45
00:08:25,280 --> 00:08:27,160
only `unset`command.

46
00:08:27,160 --> 00:08:38,960
Finally, as with traditional programming languages,
we can use shell scripts such as libraries

47
00:08:38,960 --> 00:08:46,750
that can be run from an interactive shell
session or from another shell script to set

48
00:08:46,750 --> 00:08:52,030
variables or functions for top-level processes.

49
00:08:52,030 --> 00:09:01,180
Let's try to write another script in which
we simply set the TEST variable.

50
00:09:22,140 --> 00:09:31,690
But for our first script, this variable is

51
00:09:31,690 --> 00:09:33,450
still invisible.

52
00:09:34,880 --> 00:09:36,840
Why?

53
00:09:36,840 --> 00:09:43,960
Just because it is not exported.

54
00:09:43,960 --> 00:09:48,750
Let's export.

55
00:10:07,870 --> 00:10:09,920
And run our test script agian.

56
00:10:11,500 --> 00:10:14,650
As we can see, in our main shell session,

57
00:10:14,650 --> 00:10:17,090
the variable has changed too.

