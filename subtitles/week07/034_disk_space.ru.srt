1
00:00:06,220 --> 00:00:11,670
Еще один важный момент, касающийся файловой системы, --
 это наличие места для данных.

2
00:00:11,670 --> 00:00:17,949
Если ваша файловая система заполнена, целесообразно
 проанализировать использование диска.

3
00:00:17,949 --> 00:00:27,369
Во многих системах имеется какой-нибудь анализатор диска
 с графическим интерфейсом,

4
00:00:27,369 --> 00:00:29,189
и вы сможете обнаружить проблемы визуально.

5
00:00:29,189 --> 00:00:36,189
Но помимо этого возможно выполнить эту работу с помощью
 инструментов командной строки, которые помогут вам

6
00:00:36,189 --> 00:00:43,700
автоматизировать некоторые административные задачи.

7
00:00:43,700 --> 00:01:01,060
Основным инструментом для получения данных об использовании
 дискового пространства файловой системы является утилита `df`.

8
00:01:01,079 --> 00:01:12,330
Самая полезная её опция -- "-h, --human-readable",

9
00:01:12,330 --> 00:01:20,140
которая выводит размер в удобочитаемой форме:
 килобайтах, мегабайтах, гигабайтах и ​​т. д.

10
00:01:20,140 --> 00:01:37,140
Для более точного анализа вы можете использовать утилиту `du`
 для оценки использования файлового пространства

11
00:01:37,140 --> 00:01:40,479
каталогами и файлами.

12
00:01:41,720 --> 00:01:49,310
Таким образом, мы можем получить размер некоторого каталога.

13
00:01:59,590 --> 00:02:04,909
И наиболее часто используемые параметры -- это «-k»,

14
00:02:04,909 --> 00:02:16,220
который отображает размеры в килобайтах и «-x», что означает,
 что он будет сканировать только данную файловую систему

15
00:02:16,220 --> 00:02:28,890
и пропускать каталоги в других файловых системах,
 которые могут быть смонтированы в подкаталогах этого каталога.

16
00:02:28,890 --> 00:02:29,390
Давайте рассмотрим пример использования
 инструментов командной строки для поиска

17
00:02:29,390 --> 00:02:37,780
самых больших каталогов и файлов.

18
00:02:41,970 --> 00:02:54,550
Мы исследуем каталог '/ tmp', выполняем
 числовую сортировку размеров каталогов и файлов 

19
00:02:54,550 --> 00:03:06,680
и перенаправляем результат во вьюер `less`, дабы его проанализировать.

20
00:03:06,680 --> 00:03:18,610
И после обнаружения самых больших файлов и каталогов
 мы можем очистить нашу файловую систему,

21
00:03:18,610 --> 00:03:22,480
 предварительно заархивировав нужные данные
 и сделав резервную копию.

22
00:03:22,480 --> 00:03:44,390
Самый простой способ -- просто скопировать
 с помощью команды `cp -a` на какой-нибудь внешний диск

23
00:03:44,390 --> 00:04:12,250
или с помощью `scp -rC` или `rsync -avz` на удаленный хост.

24
00:04:12,250 --> 00:04:26,600
Также, используя команды `cp` или` scp`, можно просто
 скопировать любой раздел или весь диск,

25
00:04:26,600 --> 00:04:33,280
потому что для нас это просто файлы.

26
00:04:33,280 --> 00:04:47,060
Но более эффективный способ проделать это --
 использовать команду dd (disk dump):

27
00:04:47,060 --> 00:04:49,060
$ man dd

28
00:04:49,060 --> 00:04:57,970
По умолчанию она просто копирует stdin в stdout,

29
00:04:57,970 --> 00:05:08,690
возможно, с некоторым перекодированием, если мы попросим.

30
00:05:08,690 --> 00:05:15,690
Но наиболее интересными для нас являются опции:
 «if» -- входной файл, «of» -- выходной файл,

31
00:05:15,690 --> 00:05:32,110
«bs» -- размер блока, «count», «seek» и «skip».

32
00:05:32,110 --> 00:05:32,610
С помощью комбинаций этих параметров
 мы можем выбрать файлы ввода и вывода,

33
00:05:32,610 --> 00:05:40,164
выбрать размер блока для увеличения скорости ввода-вывода,

34
00:05:40,164 --> 00:05:52,680
количество блоков, которые мы хотим скопировать,
и сдвиг/пропуск данных при выводе/вводе.

35
00:05:52,680 --> 00:06:06,150
Таким образом, мы можем вырезать и вставить любой фрагмент
 из одного файла или устройства в другое.

36
00:06:06,150 --> 00:06:15,800
Также мы можем использовать команду `od` (octal dump)

37
00:06:15,800 --> 00:06:24,169
для низкоуровневого просмотра файла или устройства в разных форматах.

38
00:06:25,860 --> 00:06:37,890
Например, посмотрим на наш жесткий диск:

39
00:06:37,890 --> 00:06:39,699
# od -bc /dev/sda1 | less

