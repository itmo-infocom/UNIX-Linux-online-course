1
00:00:06,069 --> 00:00:13,570
And now that our partitioning is complete,
it's time to see how we can use our disk space.

2
00:00:13,570 --> 00:00:27,500
As mentioned earlier, UNIX-like systems can
treat disks or disk partitions as files.

3
00:00:27,500 --> 00:00:39,350
And some databases, for example, can use raw
disk partitions to store data with higher

4
00:00:39,350 --> 00:00:40,430
performance.

5
00:00:40,430 --> 00:00:48,149
But most of the time, disk space is used in
file systems.

6
00:00:48,149 --> 00:00:56,899
UNIX-like systems and especially Linux support
many different file systems.

7
00:00:56,899 --> 00:01:07,960
All the details of their implementation are
reduced to a common denominator -- 

8
00:01:07,960 --> 00:01:12,810
the Virtual File system (VFS) abstraction.

9
00:01:12,810 --> 00:01:22,520
One of the first virtual file system mechanisms
on Unix-like systems was introduced by Sun

10
00:01:22,520 --> 00:01:25,970
Microsystems in 1985.

11
00:01:25,970 --> 00:01:42,070
It allowed Unix system calls to access local
UFS file systems and remote NFS file systems

12
00:01:42,070 --> 00:01:43,070
transparently.

13
00:01:43,070 --> 00:01:54,630
For this reason, Unix vendors who licensed
the NFS code from Sun often copied the design

14
00:01:54,630 --> 00:01:58,810
of Sun's VFS.

15
00:01:58,810 --> 00:02:10,179
Once the filesystem has been created, we can
mount it in a single directory tree, navigate

16
00:02:10,179 --> 00:02:21,190
through the hierarchy, read, write, work with
owners and permissions, according to the restrictions

17
00:02:21,190 --> 00:02:26,610
imposed by the this file systems internals.

18
00:02:26,610 --> 00:02:41,100
The standard tool for creating a new filesystem
is `mkfs`:

19
00:02:45,350 --> 00:02:56,140
We can choose the type of filesystem and some

20
00:02:56,140 --> 00:02:58,510
parameters to create.

21
00:02:58,510 --> 00:03:07,549
But it's actually just a wrapper around the
real mkfs tools for different types of filesystems:

22
00:03:20,260 --> 00:03:30,450
And they all support their own set of options.

23
00:03:34,349 --> 00:03:41,920
The most commonly used file systems in Linux

24
00:03:41,920 --> 00:03:59,440
right now are:
* EXT4 is the Linux journaling file system,

25
00:03:59,440 --> 00:04:11,449
or the Fourth Extended File System, which
is the successor to the extended file system

26
00:04:11,449 --> 00:04:25,490
line originally created in 1992 by RÃ©my Card
to overcome certain limitations of the MINIX

27
00:04:25,490 --> 00:04:27,710
file system.

28
00:04:27,710 --> 00:04:46,150
The ext4 filesystem can support files up to
16TB and volumes with sizes up to 1 exbibyte

29
00:04:46,150 --> 00:05:08,640
(EiB), but this 
may be limited for certain system versions.

30
00:05:08,640 --> 00:05:11,510
For example for RHEL 7/8 -- 50TB.

31
00:05:11,510 --> 00:05:23,790
* and XFS 

32
00:05:23,790 --> 00:05:33,290
is  a high performance 64-bit journaling file

33
00:05:33,290 --> 00:05:44,040
system created by Silicon Graphics, Inc (SGI)
in 1993 for their UNIX called IRIX.

34
00:05:44,040 --> 00:05:55,920
Although XFS scales to exabytes, the host
operating system limits can reduce this limit.

35
00:05:55,920 --> 00:06:15,280
For example -- 500 TB for the maximum file
size and file system size for RHEL7 and 1PB/8EB

36
00:06:15,280 --> 00:06:22,080
for RHEL8.

37
00:06:22,080 --> 00:06:34,060
Typically ext4 provides better performance
for small filesystems on machines with limited

38
00:06:34,060 --> 00:06:47,280
I/O capabilities, while XFS provides better
performance for large filesystems on machines

39
00:06:47,280 --> 00:06:51,930
with high-performance parallel I/O.

40
00:06:51,930 --> 00:07:01,389
Also in XFS it is more difficult to reduce
the size of the filesystem.

41
00:07:01,389 --> 00:07:09,181
With the `mkfs` options, you can set various
parameters for creating the filesystem, for

42
00:07:09,181 --> 00:07:19,370
example, optimize it for storing large files
or for more smaller files.

43
00:07:19,370 --> 00:07:31,540
Once the filesystem is created, we can "mount" it.

44
00:07:31,540 --> 00:07:41,530
In most cases, this happens automatically
when you insert a flash drive or SD card into

45
00:07:41,530 --> 00:07:43,389
your computer.

46
00:07:43,389 --> 00:07:53,020
But in some cases it needs to be done manually,
and you can do it by running the `mount` command.

47
00:07:54,020 --> 00:08:04,260
You just need to specify the device and directory

48
00:08:04,260 --> 00:08:13,139
- mount point, and after mounting you will
see the contents of the file system from this

49
00:08:13,139 --> 00:08:19,590
device or pseudo device in this directory.

50
00:08:19,590 --> 00:08:27,330
And also you can choose the "mount" options.

51
00:08:27,330 --> 00:08:47,000
For example, we can mount the ISO image with
the `loop` option.

52
00:09:11,330 --> 00:09:19,230
And then we can unmount it.

53
00:09:21,230 --> 00:09:29,740
by setting the device or the mount directory
as an argument:

54
00:09:31,730 --> 00:09:36,470
But Linux/UNIX will not allow you to unmount

55
00:09:36,470 --> 00:09:39,380
a device that is busy.

56
00:09:39,380 --> 00:09:48,590
There are many reasons for this (such as program
accessing partition or open file) , but the

57
00:09:48,590 --> 00:09:54,150
most important one is to prevent the data
loss.

58
00:09:54,150 --> 00:10:14,180
You can use 

59
00:10:14,180 --> 00:10:25,460
the `fuser` and `lsof` commands to find the
processes that are locking your filesystems.

60
00:10:25,460 --> 00:10:35,020
The `-k, --kill` option of `fuser` can help you with this.

61
00:10:35,020 --> 00:10:42,910
Finally, we can check our filesystem.

62
00:10:42,910 --> 00:10:51,710
For journaled file systems, recovering from
a power outage is not as relevant, but in

63
00:10:51,710 --> 00:10:56,370
some cases it may be useful.

64
00:10:56,370 --> 00:11:06,540
In a difficult situation, such as a damaged
hard disk -- during system boot, you may receive

65
00:11:06,540 --> 00:11:24,360
an error message recommending that you run
the `fsck` command. 

66
00:11:24,360 --> 00:11:28,921
"File system check" to check the file system.

67
00:11:28,921 --> 00:11:34,410
As we can see, we have many options for the

68
00:11:34,410 --> 00:11:46,370
`fsck` command, but the main one is 'y' -- 'yes'.

69
00:11:46,370 --> 00:11:54,810
This means -- always try to fix any file system
corruption which you find automatically, otherwise

70
00:11:54,810 --> 00:12:01,529
you could get a zillion troubleshooting questions
during the fixup.

71
00:12:01,529 --> 00:12:10,050
After completing the repair, you can find
some lost data in a special directory "/lost+found"

72
00:12:10,050 --> 00:12:17,790
in the root of the damaged filesystem, which
consists of many directories and files whose

73
00:12:17,790 --> 00:12:24,660
names contain only numbers -- 'i-nodes'.

74
00:12:24,660 --> 00:12:35,740
About 'i-nodes` see our "Under the Hood" lecture
-- links and file system,

75
00:12:35,750 --> 00:12:43,590
And then you can rename them manually - for
example, you found some directory with the

76
00:12:43,590 --> 00:12:52,339
files:
* 'passwd', 'group' and 'shadow' -- this means

77
00:12:52,339 --> 00:13:04,490
that this is '/etc'
* or 'sh', 'ls' and 'cp' -- this means '/bin'

78
00:13:04,490 --> 00:13:06,480
and so on...

79
00:13:06,490 --> 00:13:09,160
And finally, a few words about swapping.

80
00:13:09,160 --> 00:13:19,640
Swapping or paging is a memory management
scheme by which a computer stores and retrieves

81
00:13:19,640 --> 00:13:29,190
data from secondary storage for use in main
memory.

82
00:13:29,190 --> 00:13:42,930
It is an MMU-driven virtual memory mechanism
that is used in modern operating systems to

83
00:13:42,930 --> 00:13:53,670
use secondary storage in order for programs
to exceed the amount of available physical

84
00:13:53,670 --> 00:13:56,110
memory.

85
00:13:56,110 --> 00:14:06,810
For more information look at Under the Hood
-- Virtual Memory

86
00:14:06,810 --> 00:14:08,320
lecture.

87
00:14:08,320 --> 00:14:20,230
This means you can run applications with a
total memory usage that exceeds the physical

88
00:14:20,230 --> 00:14:23,770
RAM on your system.

89
00:14:23,770 --> 00:14:34,080
The scheduler sends inactive processes to
disk swap and loads active tasks from disk

90
00:14:34,080 --> 00:14:36,170
into memory.

91
00:14:36,170 --> 00:14:47,190
This can reduce overall system performance,
but increase the ability to run applications.

92
00:14:47,190 --> 00:15:10,040
The main program for creating 
of swapping area is `mkswap`:

93
00:15:20,009 --> 00:15:26,540
You just need to specify the device as an argument.

94
00:15:26,540 --> 00:15:37,310
Or a file if you need temporary swap space
like Microsoft does on Windows.

95
00:15:37,310 --> 00:15:52,720
Then you can enable swap space with the command
`swapon`:

96
00:15:52,720 --> 00:16:05,110
After that, you will see additional swap space

97
00:16:05,110 --> 00:16:32,200
using the `free` command or in the pseudo
file `/proc/meminfo`.

98
00:16:32,200 --> 00:16:45,839
You can also turn off the swap area with the
`swapoff` command.

99
00:16:48,459 --> 00:16:49,459
OK.

100
00:16:49,459 --> 00:17:00,730
But all these mounts and swaps will be connected
to our system only until the reboot.

101
00:17:00,730 --> 00:17:11,749
To automatically mount them at boot time,
we must write them to the filesystems table.

102
00:17:11,749 --> 00:17:29,780
On most UNIX-like systems, this is the `/etc/fstab`
file:

103
00:17:29,780 --> 00:17:39,000
In this text file, we can place static information

104
00:17:39,000 --> 00:17:51,029
about connecting file systems and enabling
swapping areas.

105
00:17:58,519 --> 00:18:02,649
Each filesystem is described on a separate

106
00:18:02,649 --> 00:18:13,210
line; fields on each line are separated by
tabs or spaces.

107
00:18:13,210 --> 00:18:23,669
* The first field (fs_spec) is the
block special device or remote filesystem

108
00:18:23,669 --> 00:18:24,799
to be mounted.

109
00:18:24,799 --> 00:18:34,220
* The second field (fs_file) describes the
mount point for the filesystem.

110
00:18:34,220 --> 00:18:42,320
For swap partitions, this field should be
specified as `none'.

111
00:18:42,320 --> 00:18:48,529
* The third field (fs_vfstype) describes the
type of the filesystem.

112
00:18:48,529 --> 00:18:55,529
An entry `swap` denotes a file or partition
to be used for swapping.

113
00:18:55,529 --> 00:19:08,859
* The fourth field (fs_mntops) describes the
mount options associated with the filesystem.

114
00:19:08,859 --> 00:19:16,350
* The fifth field (fs_freq) is used for these
filesystems by the dump command to determine

115
00:19:16,350 --> 00:19:26,059
which filesystems need to be backuped.

116
00:19:26,059 --> 00:19:33,929
* And the sixth field (fs_passno) is used by the
fsck(8) program to determine the order in

117
00:19:33,929 --> 00:19:39,489
which filesystem checks are done at reboot
time.

118
00:19:39,489 --> 00:20:00,950
After putting some entry in the fstab file,
you can run the `mount` command with only

119
00:20:00,950 --> 00:20:08,700
one of arguments: device or mount point.

