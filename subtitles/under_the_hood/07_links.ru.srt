1
00:00:06,140 --> 00:00:06,640
Чтобы понять, что такое жесткие (hard) и мягкие ссылки (soft links),
 нам нужно бросить взгляд

2
00:00:06,640 --> 00:00:19,670
на структуру файловой системы UNIX-подобных систем.

3
00:00:19,670 --> 00:00:24,869
В мире UNIX есть много разных файловых систем.

4
00:00:24,869 --> 00:00:29,909
Но основная идея всех их оставалась неизменной с самого начала,

5
00:00:29,909 --> 00:00:39,390
со времен PDP7.

6
00:00:39,390 --> 00:00:52,969
Обычно у нас может быть загрузочный блок

7
00:00:52,969 --> 00:01:13,450
в начале раздела устройства или файловой системы,
 затем у нас есть так называемый суперблок

8
00:01:13,450 --> 00:01:19,690
с метаданными файловой системы, а затем
 пространство данных с блоками данных,

9
00:01:19,690 --> 00:01:39,820
из которых собственно и состоят файлы.

10
00:01:39,820 --> 00:01:45,580
Суперблок -- это высокоуровневая структура
 метаданных файловой системы,

11
00:01:45,580 --> 00:01:49,490
и она очень важна для неё.

12
00:01:49,490 --> 00:01:55,010
А если суперблок раздела поврежден,
 соответствующая файловая система

13
00:01:55,010 --> 00:02:01,890
не может быть смонтирована операционной системой.

14
00:02:01,890 --> 00:02:12,760
Поэтому он сохраняется в нескольких резервных копиях
 для каждой файловой системы на этом диске.

15
00:02:12,760 --> 00:02:19,760
Суперблок включает в себя некоторую общую информацию
 о файловой системе и некоторые таблицы,

16
00:02:19,760 --> 00:02:26,560
такие как список свободных блоков данных,
 возможно, список плохих блоков и, наконец,

17
00:02:26,560 --> 00:02:48,560
список i-nodes.

18
00:02:48,560 --> 00:03:06,010
Каждый i-node (или индексный узел) описывает отдельный файл.

19
00:03:06,010 --> 00:03:12,810
Он включает метаданные, относящиеся к файлу,
 такие как права владения, режим доступа

20
00:03:12,810 --> 00:03:23,780
(чтение, запись, выполнение),
 а также тип и размер файла.

21
00:03:23,780 --> 00:03:39,330
Но i-node также включает в себя список физических блоков,
 из которых состоит файл.

22
00:03:39,330 --> 00:03:44,610
Размер блоков, поддерживающих один i-node,
 является фиксированным

23
00:03:44,610 --> 00:04:05,319
и в сочетании с размером блока данных определяет
 максимальный размер файла в этой файловой системе.

24
00:04:05,319 --> 00:04:10,839
При создании файловых систем вы можете изменить размер списка i-узлов

25
00:04:10,839 --> 00:04:17,839
и размер блока данных, а также использовать
 эти параметры для настройки файловой системы

26
00:04:17,839 --> 00:04:26,780
для работы с файлами большего размера
 или большим количеством файлов меньшего размера.

27
00:04:26,780 --> 00:04:45,800
И по поводу каталогов -- на самом деле это просто особый вид файлов,

28
00:04:45,800 --> 00:05:07,790
который содержит набор имен файлов и связанных с ними i-узлов.

29
00:05:07,790 --> 00:05:21,728
У нас может быть несколько записей в каталоге,
 связанных с одним i-node,

30
00:05:21,728 --> 00:05:29,910
и это называется hard link (жесткой ссылкой).

31
00:05:29,910 --> 00:05:35,780
Мы можем увидеть это с помощью команды `ls` с опцией `-i` (i-node).

32
00:05:37,460 --> 00:05:49,120
Как мы видим, файлы 'a' и 'c' относятся к одному и тому же i-node.

33
00:05:49,139 --> 00:05:53,160
Как мы помним, изменение любого из связанных файлов

34
00:05:53,160 --> 00:05:58,320
синхронно меняет другой файл.

35
00:05:58,320 --> 00:06:06,280
Но что интересно -- смена режима
 также происходит синхронно для обоих файлов.

36
00:06:16,700 --> 00:06:20,622
Просто потому, что метаданные файла

37
00:06:20,622 --> 00:06:25,720
находятся в одном и том же i-node.

38
00:06:25,720 --> 00:06:31,440
Кроме того, i-node имеет счетчик ссылок на файлы.

39
00:06:31,440 --> 00:06:43,850
В API UNIX у нас фактически нет чего-то вроде
 системного вызова `delete` -- есть просто `unlink`.

40
00:06:43,850 --> 00:06:53,020
И когда мы вызываем команду `rm`, мы просто
 выполняем `unlink` и уменьшаем счетчик ссылок.

41
00:06:53,020 --> 00:06:59,900
Только когда счетчик ссылок становится равным нулю,
 блоки данных, связанные с файлом,

42
00:06:59,900 --> 00:07:07,210
перемещаются в список свободных блоков.

43
00:07:13,080 --> 00:07:19,210
Как мы видим, сейчас счетчик ссылок равен единице.

44
00:07:19,210 --> 00:07:23,050
Выглядит неплохо, но, к сожалению, мы не можем

45
00:07:23,050 --> 00:07:30,300
установить жесткие линки между разными файловыми системами,
 потому что было бы слишком сложно

46
00:07:30,300 --> 00:07:41,150
синхронизировать метаданные этих файловых систем.

47
00:07:41,150 --> 00:07:52,010
И для этого в 4.2BSD была разработана soft (мягкая) или symbolic (символическая) ссылка (link).

48
00:07:52,010 --> 00:07:54,940
Как же soft link выглядит внутри?

49
00:07:54,940 --> 00:07:55,940
Давайте поглядим.

50
00:07:58,940 --> 00:08:03,420
Как видим, это просто особый тип файла. Мы видим длину 1

51
00:08:03,420 --> 00:08:20,770
вместо 9 исходного файла.

52
00:08:20,770 --> 00:08:32,450
А это означает только одно -- в этот специальный файл просто помещается

53
00:08:32,450 --> 00:08:36,490
строка с путем к этому связанному файлу.

54
00:08:36,490 --> 00:08:41,810
Как следствие, у нас нет ограничений
 на связывание файловых систем.

55
00:08:41,810 --> 00:08:52,760
Но если мы удалим исходный файл,
 мы потеряем к нему доступ по этой софт-ссылке.

