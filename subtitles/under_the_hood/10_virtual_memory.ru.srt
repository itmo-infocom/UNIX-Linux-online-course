1
00:00:06,000 --> 00:00:09,920
Как мы помним, у нас есть аппаратный механизм
 для задания виртуального набора инструкций -- прерывания. 

2
00:00:09,920 --> 00:00:22,000
Мы обсуждали это в лекции «Под капотом --
 ядро ​​как набор обработчиков прерываний».

3
00:00:22,000 --> 00:00:31,760
Но у нас также есть некоторые механизмы для виртуализации памяти

4
00:00:32,560 --> 00:00:43,040
на аппаратном уровне -- так называемый модуль
 управления памятью (Memory Management Unit -- MMU).

5
00:00:43,040 --> 00:00:50,480
Современные MMU обычно делят

6
00:00:54,000 --> 00:01:01,120
виртуальное адресное пространство
 (диапазон адресов, используемых процессором)

7
00:01:04,240 --> 00:01:23,440
на страницы, каждая из которых имеет размер,
 равный степени двойки. Обычно это несколько килобайт,

8
00:01:24,240 --> 00:01:39,840
но может быть и больше. Нижние биты адреса

9
00:01:47,120 --> 00:02:10,880
(смещение внутри страницы) остаются неизменными.
 Ну а старшие биты адреса -- это номера виртуальных страниц.

10
00:02:15,440 --> 00:02:27,560
Большинство MMU используют таблицу элементов в памяти,

11
00:02:32,800 --> 00:02:35,840
называемую "page table" (таблицей страниц),

12
00:02:41,200 --> 00:03:03,840
содержащую одну "page table entry" (PTE) на страницу,
 для сопоставления номеров виртуальных страниц

13
00:03:11,280 --> 00:03:23,920
с номерами физических страниц в основной памяти.

14
00:03:31,040 --> 00:03:34,080
Это сопоставление осуществляется для процессов,

15
00:03:35,680 --> 00:03:45,840
для динамических библиотек,
 которые загружаются таким процессом.

16
00:03:56,720 --> 00:04:02,480
Но на самом деле это страницы из физической памяти,

17
00:04:03,280 --> 00:04:13,840
в которых загруженная динамическая библиотека
 используется всеми процессами.

18
00:04:24,480 --> 00:04:30,960
Это уменьшает общий объем памяти, используемый процессами.

19
00:04:33,200 --> 00:04:46,320
Иногда PTE отказывает в доступе к виртуальной странице, 
например потому, что для этой виртуальной страницы

20
00:04:46,320 --> 00:04:58,480
не была выделена физическая память.
 В этом случае MMU сигнализирует о сбое страницы

21
00:05:00,800 --> 00:05:23,280
через аппаратное прерывание ЦП. Затем операционная система (ОС) обрабатывает ситуацию и возможно пытается

22
00:05:23,280 --> 00:05:34,800
найти свободную страницу памяти и настроить новый PTE,
 чтобы он соответствовал запрошенному виртуальному адресу.

23
00:05:37,040 --> 00:05:47,920
Если свободной оперативной памяти нет, может потребоваться
 выбрать существующую страницу, называемую "victim" (жертва),

24
00:05:48,720 --> 00:05:58,640
с помощью некоторого алгоритма замены и сохранить ее на диск
 (процесс, называемый "paging" или "swapping").

25
00:05:59,600 --> 00:06:09,680
Когда планировщик процессов пытается продолжить
 исполнение процесса на ЦП, страницы, выгруженные на диск,

26
00:06:10,240 --> 00:06:24,400
снова будут подгружены с диска в память
 в ходе обработки прерывания ошибки страницы.

27
00:06:25,440 --> 00:06:36,080
Также MMU может генерировать состояния ошибки
 недопустимой страницы при недопустимом доступе к памяти

28
00:06:36,080 --> 00:06:45,840
или попытке доступа к несуществующей странице. Что, соответственно, приводит к ошибкам сегментации или ошибкам шины

29
00:06:45,840 --> 00:06:54,800
при обработке операционной системой. В этом случае ОС может создать

30
00:06:54,800 --> 00:07:02,320
дамп ядра с образом памяти процесса
 для дальнейшей отладки и анализа сбоев.

31
00:07:05,680 --> 00:07:16,480
Более подробную информацию вы можете найти в нашей лекции
 «Под капотом» о дампе ядра.

