1
00:00:06,190 --> 00:00:06,690
Чтобы понять взаимосвязь между приоритетом и найсом,
 мы должны взглянуть,

2
00:00:06,690 --> 00:00:17,620
как устроен планировщик процессов UNIX.

3
00:00:17,620 --> 00:00:27,820
Основная задача планировщика -- регулировать доступ процессов
 к основному вычислительному ресурсу:

4
00:00:27,820 --> 00:00:45,309
процессору или процессорам (если речь идёт о многопроцессорной системе).

5
00:00:45,309 --> 00:00:56,194
Это достигается путем предоставления процессу
 так называемого «кванта времени»,

6
00:00:56,194 --> 00:01:01,679
времени, на которое выделяется процессор.

7
00:01:01,679 --> 00:01:12,860
Затем обработчик прерывания таймера выталкивает
 этот процесс после окончания временного интервала

8
00:01:12,860 --> 00:01:22,000
и заменяет его следующим процессом из очереди LIFO.

9
00:01:43,000 --> 00:01:59,740
Приоритеты -- это просто очереди LIFO, а процессы из очередей

10
00:01:59,740 --> 00:02:11,240
с более высоким приоритетом чаще используют процессор.

11
00:02:11,240 --> 00:02:20,480
Но время от времени некоторые процессы переходят в состояние «сна», например, ожидая ввода-вывода.

12
00:02:20,480 --> 00:02:31,530
А когда они просыпаются, разумно переместить их в очередь
 с более высоким приоритетом для более справедливого

13
00:02:31,530 --> 00:02:34,180
распределения вычислительных ресурсов.

14
00:02:34,180 --> 00:02:45,870
Эту работу выполняет планировщик и следствием этого является то,
 что приоритет изменяется динамически.

15
00:02:45,870 --> 00:02:56,330
Мы можем просто выдать планировщику рекомендацию
 относительно приоритизации с помощью команды `nice`.

16
00:02:56,330 --> 00:03:02,930
Но команда `nice` относится только к загрузке ЦП.

17
00:03:02,930 --> 00:03:19,280
Если нам нужно установить приоритет доступа к вводу-выводу,
 следует использовать утилиту `ionice`:

18
00:03:19,280 --> 00:03:24,520
$ man ionice

19
00:03:24,520 --> 00:03:34,069
Как мы видим, эта команда поддерживает
 класс планирования в реальном времени.

20
00:03:34,069 --> 00:03:43,020
Прежде всего, система RT не означает быстроты отклика,
 но она гарантирует отклик

21
00:03:43,020 --> 00:03:45,850
в течение заданного периода времени.

22
00:03:45,850 --> 00:03:53,650
Некоторые системы UNIX и Linux также поддерживают
 этот класс планирования и для ЦП.

23
00:03:53,650 --> 00:04:04,060
В большинстве случаев для этого используется алгоритм
 упреждающего планирования (pre-emptive scheduling).

