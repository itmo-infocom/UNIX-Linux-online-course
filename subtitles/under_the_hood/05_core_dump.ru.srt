1
00:00:05,200 --> 00:00:12,200
Дамп памяти (Core dump) представляет собой записанное на диск
 состояние рабочей памяти компьютерной программы

2
00:00:12,200 --> 00:00:23,820
в определенное время, обычно когда программа
 тем или иным образом аварийно завершилась.

3
00:00:23,820 --> 00:00:33,002
Название происходит от "magnetic core memory"
 (памяти с магнитным сердечником),

4
00:00:33,002 --> 00:00:43,429
основной формы оперативной памяти с 1950-х по 1970-е годы.

5
00:00:43,429 --> 00:00:54,120
Название осталось еще на долгое время после того
 как технология магнитных сердечников устарела.

6
00:00:54,120 --> 00:01:03,769
Современные операционные системы обычно генерируют файл,
 содержащий образ памяти, принадлежащей аварийному процессу,

7
00:01:03,769 --> 00:01:13,689
или образы памяти частей адресного пространства,
 относящихся к этому процессу,

8
00:01:13,689 --> 00:01:20,950
вместе с другой информацией, такой как значения регистров процессора,

9
00:01:20,950 --> 00:01:27,950
счетчик программ, состояние системных флагов
 и другую информацию, полезную для определения

10
00:01:27,950 --> 00:01:35,100
основной причины сбоя.

11
00:01:35,100 --> 00:01:35,600
Эти файлы можно просматривать в виде исходного текста, распечатывать
 или анализировать с помощью специализированных инструментов,

12
00:01:35,600 --> 00:01:52,319
таких как elfdump в Unix и Unix-подобных системах, objdump и kdump в Linux.

13
00:01:52,319 --> 00:01:55,981
Интересный вариант использования core-dump --

14
00:01:55,981 --> 00:02:11,230
инициализация системы вёрстки текста TeX.

15
00:02:11,230 --> 00:02:18,230
На старых компьютерах 70-х годов требовалось много времени
 для интерпретации макросов пакета TeX,

16
00:02:18,230 --> 00:02:34,640
и Дональд Кнут, создатель TeX, только что разработал механизм,
 который будет дампить ядро программы initex

17
00:02:34,640 --> 00:02:38,840
после этой интерпретации.

18
00:02:38,840 --> 00:02:39,340
А затем ему просто нужно было выполнить
 обратное действие, загрузив дамп прямо в память

19
00:02:39,340 --> 00:02:48,690
и запустив его на выполнение.

20
00:02:48,690 --> 00:02:54,670
Таким образом мы сразу получаем интерпретированные пакеты.

21
00:02:56,290 --> 00:03:03,290
И наиболее распространенное использование дампа ядра --
 это просмотр состояния отказа в отладчике

22
00:03:03,290 --> 00:03:17,300
или, например, состояния где мы подвисли, из которого мы выгрузили
 дамп приложения с помощью сочетания клавиш C-\

23
00:03:17,300 --> 00:03:20,710
или сигнала SIGQUIT.

24
00:03:20,710 --> 00:03:25,566
Этот анализ может быть очень полезен для встроенных систем,

25
00:03:25,566 --> 00:03:32,439
где интерактивная отладка может быть недоступна.

26
00:03:32,439 --> 00:03:39,290
По умолчанию core dump отключен в большинстве систем.

27
00:03:39,290 --> 00:03:40,969
Но вы можете использовать команду ulimit в bash:

28
00:03:40,969 --> 00:03:49,360
$ ulimit -c 0

29
00:03:49,360 --> 00:03:54,900
Это означает отключение core dump.

30
00:03:54,900 --> 00:03:59,180
И мы можем включить его:

31
00:03:59,180 --> 00:04:07,120
$ ulimit -c unlimited

32
00:04:07,120 --> 00:04:07,620
Также в Linux у нас есть общесистемная конфигурация `/etc/security/limits.conf`, в которой мы можем установить жесткие и мягкие ограничения

33
00:04:07,620 --> 00:04:55,000
для пользователей и групп, включая ограничения на размер дампа ядра:

34
00:04:55,000 --> 00:04:59,030
$ cat /etc/security/limits.conf

35
00:04:59,030 --> 00:05:03,060
$ man limits.conf

