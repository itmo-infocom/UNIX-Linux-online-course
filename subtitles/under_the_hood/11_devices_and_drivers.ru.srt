1
00:00:06,230 --> 00:00:13,254
Несколько слов об устройствах и драйверах.
 В классической модели драйверов Unix

2
00:00:13,254 --> 00:00:26,070
устройства относятся к одной из трех категорий:
 символьные устройства, блочные устройства и сетевые устройства.

3
00:00:26,070 --> 00:00:40,120
В Unix драйверы -- это блоки кода, относящиеся к ядру
 и работающие в привилегированном режиме.

4
00:00:40,120 --> 00:00:50,080
Как правило, код драйвера выполняется от имени приложения,
 запускаемого в пользовательском режиме.

5
00:00:50,080 --> 00:00:59,570
Доступ к драйверам Unix из пользовательских приложений
 осуществляется через файловую систему.

6
00:00:59,570 --> 00:01:09,900
Другими словами, устройства доступны приложению
 как файлы специальных устройств, которые могут быть открыты.

7
00:01:09,900 --> 00:01:17,890
Когда-то все драйверы были встроены в монолитное ядро,
 и каждое изменение в наборе устройств

8
00:01:17,890 --> 00:01:32,010
требовало пересборки ядра. Затем был разработан
 механизм динамической загрузки драйверов устройств,

9
00:01:32,010 --> 00:01:41,770
который сделал возможной реконфигурацию
 с поддержкой динамического изменения набора устройств.

10
00:01:41,770 --> 00:01:48,250
В настоящее время почти все современные системы
 поддерживают это оборудование --

11
00:01:48,250 --> 00:01:48,750
нам просто нужно установить пакет с новым драйвером устройства,

12
00:01:48,750 --> 00:02:04,150
и это устройство немедленно начнёт поддерживаться системой.

13
00:02:04,150 --> 00:02:17,371
Как мы помним, мы можем получить доступ к устройству
 через псевдофайл в каталоге '/dev'.

14
00:02:17,371 --> 00:02:21,870
И это будут специальные файлы:

15
00:02:21,870 --> 00:02:28,480
$ ls -l /dev/null
crw-rw-rw-. 1 root root 1, 3 Aug 28 19:06 /dev/null

16
00:02:28,480 --> 00:02:36,200
$ ls -l /dev/sda
brw-rw----. 1 root disk 8, 0 Aug 28 19:06 /dev/sda

17
00:02:36,200 --> 00:02:43,799
Мы видим это в первом символе поля с правами доступа:

18
00:02:43,799 --> 00:02:50,379
* 'c' -- означает символьное устройство

19
00:02:50,379 --> 00:02:52,930
* и 'b' -- блочное устройство.

20
00:02:52,930 --> 00:03:05,920
Мы можем работать с ними обоими, как с файлами,
 но на блочном устройстве можно создать файловую систему.

21
00:03:05,920 --> 00:03:15,227
А как насчет размера файла? Вместо размера
 мы видим две странные цифры,

22
00:03:15,227 --> 00:03:23,673
которые не имеют ничего общего, например,
 с реальным размером устройства.

23
00:03:23,673 --> 00:03:29,237
Чтобы понять значение этих чисел,
 мы должны по быстрому взглянуть на организацию подсистемы,

24
00:03:29,237 --> 00:03:37,370
обслуживающей устройства в UNIX-подобном ядре.

25
00:03:37,370 --> 00:03:51,240
С самого начала драйверы в ядре UNIX были помещены
 в две специальные таблицы, `cdevsw` и `bdevsw` --

26
00:03:51,240 --> 00:03:58,240
character and block device switches (символьные и блочные
 переключатели устройств). В этих таблицах

27
00:03:58,240 --> 00:04:46,940
есть отдельная строка для каждого драйвера устройства.
 А первое число из двух (так называемое "major number") --

28
00:04:46,940 --> 00:04:52,940
это всего лишь позиция в этой таблице.
 Каждый драйвер помещает точки входа

29
00:04:52,940 --> 00:05:36,340
для стандартных файловых функций в соответствующую строку таблицы: `open`, `close`, `read`, `write`, `seek` и все, что не вписывается в эти функции, --

30
00:05:36,340 --> 00:05:53,750
 в функцию `ioctl` (I/O control). Чтобы написать новый драйвер, 

31
00:05:53,750 --> 00:05:59,220
вам просто нужно реализовать такие функции для вашего устройства.

32
00:05:59,220 --> 00:06:11,760
OK. А как насчет второго числа -- так называемого "minor number"?

33
00:06:11,760 --> 00:06:20,000
Давайте еще раз взглянем на каталог '/dev':

34
00:06:20,000 --> 00:06:23,600
$ ls -l /dev/zero
crw-rw-rw-. 1 root root 1, 5 Aug 28 19:06 /dev/zero

35
00:06:23,600 --> 00:06:27,000
$ ls -l /dev/mem
crw-r-----. 1 root kmem 1, 1 Aug 28 19:06 /dev/mem

36
00:06:27,009 --> 00:06:33,310
Выглядит занятно -- у нас одинаковый "major"

37
00:06:33,310 --> 00:06:47,530
для всех устройств '/dev/null', '/dev/zero' и даже '/dev/mem`.
 Это означает, что все они обрабатываются

38
00:06:47,530 --> 00:06:59,950
одним и тем же драйвером. И еще:

39
00:06:59,950 --> 00:07:03,530
$ ls -l /dev/sd*

40
00:07:03,530 --> 00:07:11,940
Как мы видим, все жесткие диски со всеми разделами

41
00:07:11,940 --> 00:07:22,810
также обрабатываются одним драйвером.
 Между этими файлами есть только одно различие: "minor".

42
00:07:22,810 --> 00:07:32,150
И в самом деле -- это всего лишь параметр,
 который передается драйверу. По этому minor номеру

43
00:07:32,150 --> 00:07:41,090
драйвер понимает, какое устройство нам нужно --
 '/dev/null', '/dev/zero' или '/dev/mem',

44
00:07:41,090 --> 00:07:50,300
или то, с каким жестким диском или разделом мы работаем.

45
00:07:50,300 --> 00:08:11,020
В стародавние времена специальные файлы устройств
 в каталоге '/dev' создавались утилитой `mknod`

46
00:08:11,020 --> 00:08:23,300
в скрипте MAKEDEV с фиксированными major и minor.
В настоящее время все файлы устройств

47
00:08:23,300 --> 00:08:31,140
создаются автоматически в специальной файловой системе устройств.

48
00:08:31,140 --> 00:08:38,560
Но утилита `mknod` в некоторых случаях по прежнему может быть полезна:

49
00:08:38,560 --> 00:08:39,560
$ man mknod

50
00:08:39,560 --> 00:08:42,419
Как мы можем видеть, мы можем создать специальные файлы,

51
00:08:42,419 --> 00:08:55,930
выбрав тип устройства: «c» для символьных и «b» для блочных устройств,
 но у нас есть и особый тип файла "p" для так называемых 

52
00:08:55,930 --> 00:09:07,980
"именованных каналов". Мы можем использовать его
 в качестве каналов оболочки

53
00:09:07,980 --> 00:09:19,380
для межпроцессного взаимодействия,
 но с точкой входа в иерархию вашей файловой системы.

54
00:09:19,380 --> 00:09:39,000
$ mknod /tmp/p p
$ cat > /tmp/p
123
^D

55
00:09:39,000 --> 00:09:48,000
$ cat /tmp/p
123

56
00:09:48,000 --> 00:09:55,300
Отправляем данные из одного процесса

57
00:09:55,300 --> 00:10:01,100
и получаем данные в другом процессе,

58
00:10:01,100 --> 00:10:09,260
используя этот именованный канал.

59
00:10:09,260 --> 00:10:16,640
В действительности ничего не помещалось
 в файловую систему, в реальный файл.

60
00:10:16,640 --> 00:10:32,920
Всё просто пересылается через структуры
 внутреннего канала как в обычном конвейере.

