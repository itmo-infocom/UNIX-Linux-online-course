1
00:00:06,560 --> 00:00:16,320
We talked about the kernel as some kind 
of magic program that loads at boot and  

2
00:00:16,320 --> 00:00:28,560
keeps running while your computer is on. But 
what exactly does this program do? To understand  

3
00:00:28,560 --> 00:00:39,520
this, we need to look at the evolution of software 
in computer systems. At the beginning, when they  

4
00:00:39,520 --> 00:00:49,840
had just created computer programs, the question 
quickly arose -- how to reuse what was written?

5
00:00:51,440 --> 00:01:04,400
So, the well-known Pareto law works -- when you 
need something new, most likely, it is already  

6
00:01:06,880 --> 00:01:18,000
80% written by someone, and you only 
need to complete or redo only 20%. You  

7
00:01:18,720 --> 00:01:24,960
can of course use the good old 
"cut and paste" method, but  

8
00:01:25,920 --> 00:01:35,600
this is often a source of errors and bugs, 
especially on large and complex systems.

9
00:01:36,960 --> 00:01:39,840
To solve this problem,  

10
00:01:41,360 --> 00:01:50,800
some of the most commonly used functions have been 
compiled into software libraries, which  

11
00:01:50,800 --> 00:02:04,560
are usually just archives of object files of such 
compiled programs. You can then link some of these  

12
00:02:04,560 --> 00:02:12,880
object files to your executable and use functions 
developed and tested by others on your program.

13
00:02:14,320 --> 00:02:20,320
But with the development of the computer 
industry and the widespread use of  

14
00:02:22,000 --> 00:02:29,680
computer systems, the question arises about 
a more stable software core for working with  

15
00:02:29,680 --> 00:02:37,040
external devices and system resources, 
for regulating access to them  

16
00:02:37,040 --> 00:02:44,400
for programs and users. And the 
solution came in the form of interrupts.

17
00:02:45,680 --> 00:02:54,240
What is it interrupt? Accordingly 
Dijkstra “It was a great invention,  

18
00:02:55,040 --> 00:03:02,320
but also a Box of Pandora”. A more formal interrupt  

19
00:03:02,960 --> 00:03:09,680
is the processor's response to 
an event that requires attention  

20
00:03:10,400 --> 00:03:18,160
from the software. Historically, interrupts 
were first created to solve problems  

21
00:03:18,720 --> 00:03:32,160
detected by hardware, for example, arithmetic 
overflow implemented for UNIVAC I (1951).

22
00:03:32,160 --> 00:03:40,240
Interrupts are widely used to handle 
arithmetic errors, improper memory access,  

23
00:03:40,240 --> 00:03:49,680
and finally, to work with devices. Technically, 
interrupts are simply events that switch the  

24
00:03:51,440 --> 00:04:00,160
processor from executing the current program to 
the execution of the so-called interrupt handler  

25
00:04:00,160 --> 00:04:14,840
program, the address of which is placed in a 
special table placed in a fixed memory area -  

26
00:04:24,240 --> 00:04:31,680
the table of interrupt vectors. 
For each type of interrupt,  

27
00:04:33,040 --> 00:04:43,600
a special position on this table is used with 
the address of the corresponding handler program.  

28
00:04:50,640 --> 00:04:55,280
When an interrupt request is generated, the  

29
00:04:55,280 --> 00:05:08,880
processor saves the current state of the processor 
registers and switches the program counter to  

30
00:05:09,840 --> 00:05:33,920
this handler. At the end of the handler program, 
a special machine instruction is executed -- the  

31
00:05:33,920 --> 00:05:45,520
exit from interrupt and the processor state 
before the interrupt was called is restored.

32
00:05:50,480 --> 00:05:57,920
But the real breakthrough came when 
software interrupts were invented.  

33
00:05:59,520 --> 00:06:08,000
They were first implemented as a debugging 
feature called "transfer trapping" in the IBM  

34
00:06:09,680 --> 00:06:21,600
704 (1955). But gradually it became 
clear that this allows you to implement  

35
00:06:21,600 --> 00:06:27,200
the functionality of the processor with 
a virtual instruction set. For example,  

36
00:06:27,920 --> 00:06:36,160
we can only call one machine command to open a 
file. It must be a software interrupt command.

37
00:06:36,800 --> 00:06:42,160
There are different commands for different 
computer architectures: INT on Intel,  

38
00:06:43,200 --> 00:06:52,000
SVC / SWI on ARM, TRAP on SPARC, etc. On 
the PDP 11, we had more than one software  

39
00:06:52,000 --> 00:07:03,040
interrupt in the instruction set -- EMT for DEC 
OS and SYS used by UNIX. But they all do only  

40
00:07:03,040 --> 00:07:15,920
one thing -- we jump to the interrupt vector
and run the corresponding handler program.

41
00:07:15,920 --> 00:07:26,640
Such a command from the programming 
API side looks like a function  

42
00:07:28,240 --> 00:07:34,640
called "system call". And when we 
call such a function from our program,  

43
00:07:34,640 --> 00:07:44,240
it looks like a single machine instruction in 
assembler, but it can run many other functions  

44
00:07:44,240 --> 00:07:51,680
and interact with many system services. For 
example, when we execute the system call  

45
00:07:52,640 --> 00:08:01,440
"open a file" that is hosted on a network file 
server, we are actually searching in the file  

46
00:08:01,440 --> 00:08:09,680
system tree by calling the VFS functions, 
redirecting to the corresponding network  

47
00:08:09,680 --> 00:08:15,760
file system driver, sending network requests 
by the network TCP/IP stack drivers through  

48
00:08:15,760 --> 00:08:24,000
a network device connected to the file server's 
network, interacting with the server side of the  

49
00:08:24,000 --> 00:08:32,080
network file system on the server, viewing our 
file on the server's local file system using  

50
00:08:32,080 --> 00:08:42,320
its own VFS, and then accessing it through the 
hard disk device driver that placed this file.

51
00:08:43,680 --> 00:08:53,920
And in fact, all this black magic is done with 
a single command, which may look like a virtual  

52
00:08:53,920 --> 00:09:03,760
command to "open a file" on your processor. 
In general, an OS is basically just a set of  

53
00:09:03,760 --> 00:09:10,480
interrupt handlers that implement such 
a set of virtual instructions specific  

54
00:09:10,480 --> 00:09:20,200
to this OS and interact with the hardware. For 
example, as we will see in the future, with a  

55
00:09:20,720 --> 00:09:32,320
system's timer to switch the processor context 
while a multitasking system is running.

