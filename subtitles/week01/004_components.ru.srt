1
00:00:06,130 --> 00:00:14,120
Основным принципом проектирования, используемым
в UNIX-подобных системах, является принцип «KISS».

2
00:00:14,120 --> 00:00:28,750
KISS, это акроним для "keep it stupid simple" (тупо придерживайся простоты)
или "keep it short and simple" (поддерживай это в краткости и простоте) --

3
00:00:28,750 --> 00:00:33,801
принцип проектирования, принятый в ВМС США в 1960.

4
00:00:33,801 --> 00:00:46,800
Принцип KISS утверждает, что большинство систем
работают лучше всего, если они остаются простыми,

5
00:00:46,800 --> 00:00:54,540
а не усложняются. Поэтому в области проектирования
простота должна быть одной из ключевых целей.

6
00:00:54,540 --> 00:00:56,579
Избыточной сложности следует избегать.

7
00:00:56,579 --> 00:01:01,190
И с самого начала UNIX была очень гибкой модульной системой.

8
00:01:01,190 --> 00:01:09,810
Базовый набор компонентов, из которых строятся UNIX-подобные системы:

9
00:01:09,810 --> 00:01:18,020
ядро (Kernel), оболочка (Shell), библиотеки (Libraries) и утилиты (Utilities).

10
00:01:18,030 --> 00:01:29,509
Ядро -- это первая часть кода ОС, которая загружается
в память вашего компьютера и запускается на исполнение.

11
00:01:29,509 --> 00:01:34,979
Эта программа запускает все процессы в системе,
обрабатывает взаимодействие между системными ресурсами

12
00:01:34,979 --> 00:01:42,139
и остается в активном состоянии, пока ваша система работает.

13
00:01:42,139 --> 00:01:48,299
Ядро работает с наивысшими привилегиями
и имеет доступ ко всем системным ресурсам.

14
00:01:48,299 --> 00:01:56,509
Все процессы в системе работают в пользовательском пространстве и

15
00:01:56,509 --> 00:02:04,139
взаимодействуют с такими ресурсами и между собой,
отправляя запросы ядру с помощью специальных программных функций,

16
00:02:04,139 --> 00:02:05,619
называемых «системные вызовы».

17
00:02:05,619 --> 00:02:14,150
И ядро обрабатывает такие запросы в соответствии
с разрешениями между процессами и ресурсами.

18
00:02:14,150 --> 00:02:24,690
Более подробную информацию о роли ядра ОС можно найти в лекции

19
00:02:24,690 --> 00:02:29,720
«Под капотом -- ядро как набор обработчиков прерываний».

20
00:02:29,720 --> 00:02:40,610
Но если у нас есть ядро, разумно иметь и оболочку вокруг него.

21
00:02:40,610 --> 00:02:44,220
И у нас есть такая!

22
00:02:44,220 --> 00:02:55,400
О, пардон, не такая -- на данный момент существует множество оболочек, восходящих к изначальной оболочке (shell) Unix Кена Томпсона,

23
00:02:55,400 --> 00:02:59,390
появившейся в 1971.

24
00:02:59,390 --> 00:03:10,980
Фактически оболочка -- это первый и самый важный
коммуникатор между человеком, программами и ядром.

25
00:03:10,980 --> 00:03:16,600
В сущности, это просто программа, которая
запускается при входе пользователя в систему.

26
00:03:16,600 --> 00:03:22,970
Она прослушивает стандартный ввод (обычно с клавиатуры)
и отправляет вывод команд

27
00:03:22,970 --> 00:03:30,240
на стандартный вывод (обычно на экран).

28
00:03:30,240 --> 00:03:36,270
Самая известная реализация оболочки UNIX --

29
00:03:36,270 --> 00:03:47,900
Bourne shell, разработанная Стивеном Борном в Bell Labs в 1979 году и включенная в качестве интерпретатора по умолчанию для выпуска Unix версии 7,

30
00:03:47,900 --> 00:03:52,230
распространяемого среди колледжей и университетов.

31
00:03:52,230 --> 00:04:02,800
В нём поддерживались переменные среды, перенаправление потоков
ввода/вывода, программные каналы и продвинутый скриптовой язык.

32
00:04:02,819 --> 00:04:11,630
Все современные оболочки (и не только оболочки UNIX)
унаследовали эти возможности от данной реализации.

33
00:04:11,630 --> 00:04:21,480
Оболочка -- это очень эффективный клей для утилит
в многозадачных операционных системах.

34
00:04:21,480 --> 00:04:29,870
Наиболее часто используемые утилиты были разработаны
в самом начале существования UNIX.

35
00:04:29,870 --> 00:04:36,800
Это инструменты для работы с пользователями,
группами, файлами и процессами.

36
00:04:36,800 --> 00:04:44,880
Поскольку UNIX изначально создавался
для автоматизации работы патентного отдела,

37
00:04:44,880 --> 00:04:51,630
он имеет богатый набор инструментов
для обработки текстовых файлов и потоков.

38
00:04:51,630 --> 00:04:59,460
Наиболее часто используемый шаблон проектирования для утилит UNIX --

39
00:04:59,460 --> 00:05:01,970
это фильтр между стандартным вводом и стандартным выводом.

40
00:05:01,970 --> 00:05:10,190
Произвольное количество таких программ может быть
объединено в так называемый программный конвейер,

41
00:05:10,190 --> 00:05:15,910
который использует программные каналы Shell
для межпроцессного взаимодействия.

42
00:05:15,910 --> 00:05:26,900
Каждая такая утилита может быть очень простой, но вместе
они могут компоноваться в очень мощную составную программу,

43
00:05:26,900 --> 00:05:32,330
которая умещается в одной командной строке.

44
00:05:32,330 --> 00:05:39,380
Дуг Макилрой, глава компьютерного исследовательского
центра Bell Labs и изобретатель

45
00:05:39,380 --> 00:05:50,240
каналов Unix, описал философию Unix следующим образом:
«Пишите программы, которые выполняют одну задачу

46
00:05:50,240 --> 00:05:52,910
и делают это хорошо.

47
00:05:52,910 --> 00:05:56,120
Пишите программы так, что бы они могли работать совместно.

48
00:05:56,120 --> 00:06:03,240
Пишите программы для обработки текстовых потоков,
потому что это универсальный интерфейс».

49
00:06:03,240 --> 00:06:14,150
В настоящее время наибольшее распространение
получили утилиты проекта GNU,

50
00:06:14,150 --> 00:06:17,220
разработанные после коммерциализации UNIX.

51
00:06:17,220 --> 00:06:28,310
В большинстве случаев они богаче по своим возможностям
и имеют больший набор параметров,

52
00:06:28,310 --> 00:06:36,760
чем классический набор утилит SYSV,
который вы видите в коммерческих UNIX.

53
00:06:36,760 --> 00:06:44,910
В компактных встроенных системах вы можете увидеть
такую систему, как «busybox», которая выглядит

54
00:06:44,910 --> 00:06:50,770
как один двоичный файл, видимый под множеством личин,
создаваемый из конфигурируемой модульной библиотеки.

55
00:06:50,770 --> 00:07:00,090
Он может представлять полнофункциональный набор утилит
в стиле UNIX, включая оболочку и текстовый редактор.

56
00:07:00,090 --> 00:07:08,440
А на этапе сборки вы можете выбрать именно те функции, которые вам нужны,

57
00:07:08,440 --> 00:07:11,440
чтобы уменьшить размер приложения.

58
00:07:11,440 --> 00:07:20,540
Все утилиты и оболочки построены на основе программных библиотек.

59
00:07:20,540 --> 00:07:27,460
Они могут быть динамически или статически слинкованы.

60
00:07:27,460 --> 00:07:35,270
В первом случае мы получаем больше гибкости в обновлении и настройках.

61
00:07:35,270 --> 00:07:44,440
Кроме того, мы получаем набор приложений,
которые в целом занимают меньше места на диске и в памяти.

62
00:07:44,440 --> 00:07:53,229
Во втором случае мы получаем монолитное приложение,
которое меньше зависит

63
00:07:53,229 --> 00:08:00,669
от общей конфигурации системы и может быть
более платформонезависимым.

64
00:08:00,669 --> 00:08:16,690
И, как я сказал ранее, в первом случае вы можете использовать
библиотеки с так называемыми «вирусными лицензиями» (например, GPL)

65
00:08:16,690 --> 00:08:25,680
для написания проприетарных приложений,
то во втором случае это невозможно.

