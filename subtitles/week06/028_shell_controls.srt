1
00:00:05,400 --> 00:00:17,010
So we have scripts with arguments, but what
about the logic? We have some operations that

2
00:00:17,010 --> 00:00:31,109
look like logical ones, but at first glance
they look a little strange. Actually, the cornerstone

3
00:00:31,109 --> 00:00:45,560
of Shell's logic is this strange reserved
variable:

4
00:00:45,560 --> 00:00:49,360
$? – this is exit value of the last run command

5
00:00:49,360 --> 00:00:56,600
For example, we have the following commands:

6
00:00:56,600 --> 00:01:00,530
$ true; echo $?
0

7
00:01:00,530 --> 00:01:08,380
$ false; echo $?
1

8
00:01:08,390 --> 00:01:21,030
What does this mean? Only one thing -- we
have a successful program with an exit code

9
00:01:21,030 --> 00:01:37,070
of 0 and a failure with a non-zero exit code.
It seems strange, but it is understandable

10
00:01:37,070 --> 00:01:50,950
-- in fact, UNIX follows Leo Tolstoy's principle:
“All happy families are alike; each unhappy

11
00:01:50,950 --> 00:02:03,340
family is unhappy in its own way.” That's
right -- we were not interested in the details

12
00:02:03,340 --> 00:02:14,920
of when our program finished successfully,
but the reason for the failure can be different

13
00:02:14,920 --> 00:02:20,200
and we should be able to separate one from
the other.

14
00:02:20,200 --> 00:02:30,279
And if we have successful and unsuccessful
results, we can operate on those results using

15
00:02:30,279 --> 00:02:39,469
operations similar to the logical operators
AND and OR:

16
00:02:39,469 --> 00:02:56,170
* prog1 && prog2 -- means running prog2 if
prog1 succeeds (with 0 exit code)

17
00:02:56,170 --> 00:03:13,590
* prog1 || prog2 -- means start prog2 if prog1
failed (exited with code other than 0)

18
00:03:13,590 --> 00:03:21,950
OK. Also our programming language has the good
old "if".

19
00:03:28,859 --> 00:03:37,099
And what is this “list” in this case?
These are just a command. The exit code of

20
00:03:37,099 --> 00:03:45,000
the command will determine the behavior of
the `if`.

21
00:03:45,000 --> 00:04:03,000
And in body of our 'if' we can run other commands
which named the "list" too.

22
00:04:00,819 --> 00:04:08,569
statements is` test`. And the most commonly
used command in statements is `if` is the

23
00:04:03,000 --> 00:04:08,560
And the most commonly used command in `if`

24
00:04:08,569 --> 00:04:26,900
`test` command or just an opening square bracket
(it is often just a link to the executable

25
00:04:26,900 --> 00:04:41,080
`test`). Be aware that if you use a square
bracket, you must close the expression with

26
00:04:41,080 --> 00:04:54,560
a closing square bracket. And the space before
that is important, because it's just a command's

27
00:04:54,560 --> 00:04:58,660
argument.

28
00:04:58,660 --> 00:05:14,440
OK. We can see such expressions which checks string or variable:

29
00:05:14,440 --> 00:05:24,100
is it not zero, is zero

30
00:05:24,100 --> 00:05:34,920
Operation NOT by "!", logical operations AND, OR.

31
00:05:34,920 --> 00:05:55,900
Comparison of strings. And as we can see  comparison for
numbers looks like in old good Fortran comparison operations.

32
00:05:55,900 --> 00:06:07,940
Some checking about existing of files, or directories, or symbolic links

33
00:06:07,949 --> 00:06:08,949
and many others.

34
00:06:08,949 --> 00:06:22,229
We also have loop statements - `while`, which

35
00:06:22,229 --> 00:06:33,120
execute commands while the statement command
returns 0

36
00:06:33,129 --> 00:06:39,040
and `until`, executing until the statement
command fails.

37
00:06:39,059 --> 00:06:45,539
We also have a `for` loop construct, which

38
00:06:45,539 --> 00:06:57,760
may not seem very familiar to programmers
from classical programming languages such as C.

39
00:06:57,770 --> 00:07:01,979
The source of the values that are set for

40
00:07:01,979 --> 00:07:12,220
the loop variable is just a string of words,
separated by spaces. To emulate the classic

41
00:07:12,220 --> 00:07:20,370
number cycles, we have to use special commands
that will generate sequences of numbers for us.

42
00:07:20,370 --> 00:07:27,270
Like `seq` command:

43
00:07:50,200 --> 00:07:51,300
Like this

44
00:08:06,500 --> 00:08:12,000
Sequence from 1 to 10 with step 2.

45
00:08:12,000 --> 00:08:16,180
Also

46
00:08:16,199 --> 00:08:28,499
you can use the classic "break" and "continue"
loop operators with the ability to set of loop level

47
00:08:28,499 --> 00:08:35,080
for breaking or continuing of your loop.

48
00:08:35,080 --> 00:08:44,320
A `case` command first expands the word, and tries

49
00:08:44,320 --> 00:08:58,030
to match it against each pattern in turn,
using the same matching rules as for pathname

50
00:08:58,030 --> 00:09:01,320
expansion.

51
00:09:01,320 --> 00:09:08,170
If the "double semicolon" operator is used,

52
00:09:08,170 --> 00:09:18,200
no subsequent matches are attempted after
the first pattern match. As in C-language.

53
00:09:18,200 --> 00:09:22,480
Let's try to play with our `hello` program again:

54
00:11:24,900 --> 00:11:27,434
OK

