1
00:00:07,460 --> 00:00:09,460
Итак, функции.

2
00:00:12,429 --> 00:00:20,060
Эта конструкция определяет функцию с именем «name».

3
00:00:20,060 --> 00:00:27,060
Использование зарезервированного слова `function`
 не является обязательным.

4
00:00:27,060 --> 00:00:33,310
И мы можем `return` (вернуть) некоторый код при выходе из функции.

5
00:00:35,850 --> 00:00:41,240
Аргументы в функции обрабатываются стандартным образом --

6
00:00:41,240 --> 00:00:46,370
как доллар с позиционным номером параметра.

7
00:00:46,370 --> 00:00:55,720
С точки зрения внешнего наблюдателя функция
 выглядит точно так же, как обычная команда,

8
00:00:55,720 --> 00:01:04,290
которую можно запустить из командной строки или сценария.

9
00:01:04,290 --> 00:01:16,009
И, как мы помним, возможна некоторая
 функциональность типа библиотек для Shell.

10
00:01:47,770 --> 00:01:49,209
Итак, давайте глянем.

11
00:01:53,060 --> 00:01:57,760
Таким образом мы можем увидеть определение нашей функции.

12
00:02:08,220 --> 00:02:15,340
Теперь мы будем использовать его в нашем скрипте.

13
00:02:25,060 --> 00:02:28,000
ОК. Это работает.

14
00:02:28,000 --> 00:02:35,200
И, наконец, некоторые полезные функции,

15
00:02:35,200 --> 00:02:39,300
встроенные в Shell:

16
00:02:39,300 --> 00:02:44,280
basename -- удалить каталог и суффикс из имен файлов

17
00:02:44,280 --> 00:02:49,510
dirname -- удалить суффикс, не являющийся каталогом, из имени файла

18
00:02:49,510 --> 00:02:52,720
echo -- отобразить строку текста

19
00:02:52,720 --> 00:02:56,880
eval -- выполнить выражение shell'ом

20
00:02:56,890 --> 00:03:04,100
exec -- выполнить, заместив shell командой

21
00:03:04,100 --> 00:03:13,100
read -- чтение строки из stdin в переменную

22
00:03:13,100 --> 00:03:14,840
shift -- сдвиг параметров, что может использоваться, например, в циклах.

23
00:03:14,849 --> 00:03:24,510
sleep -- задержка выполнения

24
00:03:24,510 --> 00:03:27,099
на указанное время.

25
00:03:27,099 --> 00:03:36,319
И было бы полезно понять, что именно мы выполняем,

26
00:03:36,319 --> 00:03:37,590
когда вызываем команду.

27
00:03:37,590 --> 00:03:42,650
И у нас есть следующие команды:

28
00:03:42,650 --> 00:03:45,150
`which` и `type`.

29
00:03:45,150 --> 00:03:46,150
Попробуем запустить.

30
00:03:55,230 --> 00:03:59,800
Почему результаты такие разные?

31
00:03:59,800 --> 00:04:12,180
Просто потому, что первая является встроенной функцией
 нашей оболочки, а вторая -- настоящей командой.

32
00:04:23,380 --> 00:04:28,430
Для стороннего двоичного файла

33
00:04:28,430 --> 00:04:29,430
результаты аналогичны.

34
00:04:34,160 --> 00:04:35,040
ОК

