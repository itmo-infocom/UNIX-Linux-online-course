1
00:00:05,120 --> 00:00:15,920
История графической системы UNIX восходит
 к образовательному проекту MIT Athena 1984 года.

2
00:00:18,160 --> 00:00:25,520
Athena не была исследовательским проектом,

3
00:00:26,480 --> 00:00:36,720
и разработка новых вычислительных моделей не была её основной целью.

4
00:00:37,280 --> 00:00:50,320
На самом деле все было наоборот. MIT хотел создать
 высококачественную учебную вычислительную среду.

5
00:00:51,280 --> 00:00:57,760
В сотрудничестве с DEC и IBM в рамках проекта была
 разработана системно-независимая графическая платформа,

6
00:00:57,760 --> 00:01:07,360
позволяющая связать вместе различные системы от нескольких поставщиков с помощью протокола, который может запускать как локальные,

7
00:01:07,360 --> 00:01:19,920
так и удаленные приложения. Эта система стала основой
 X-Window System, которая начала своё распространение

8
00:01:21,280 --> 00:01:28,480
в 1985 году и была перенесена на различные платформы, а не только на UNIX.

9
00:01:30,000 --> 00:01:36,800
В настоящее у нас есть несколько преемников
 классической системы X-Window,

10
00:01:36,800 --> 00:01:46,880
наиболее известной из которых является Android на мобильных устройствах или графическая система Wayland на настольных компьютерах Linux,

11
00:01:47,600 --> 00:01:58,960
но X-Windows все еще широко используется сегодня. И мы обсудим
 некоторые нетривиальные концепции, связанные с этим.

12
00:01:59,920 --> 00:02:04,880
Чтобы ознакомиться с ними, заглянем в справочное руководство:

13
00:02:04,880 --> 00:02:08,840
$ man X

14
00:02:10,320 --> 00:02:19,840
Прежде всего, X-Window System -- это сетевая клиент-серверная архитектура.

15
00:02:19,840 --> 00:02:26,560
Но отношения между клиентом и сервером

16
00:02:29,040 --> 00:02:35,840
на первый взгляд кажутся не слишком очевидными. Как правило, X-сервер

17
00:02:36,720 --> 00:02:46,480
просто принимает запросы от различных клиентских программ
 на отображение графики (окна приложений)

18
00:02:47,120 --> 00:02:58,400
и отправляет обратно пользовательский ввод (с клавиатуры, мыши
 или сенсорного экрана). И сервер, например, будет работать

19
00:02:58,400 --> 00:03:08,800
на вашем планшете, а приложения, которые работают
 на суперкомпьютере, являются просто клиентами.

20
00:03:09,760 --> 00:03:16,400
Главный принцип X-Window: «Предоставлять механизм, а не политику.

21
00:03:16,400 --> 00:03:23,520
К примеру, политика пользовательского интерфейса
 передаётся в руки клиента».

22
00:03:24,240 --> 00:03:27,440
И основным локатором для X-сервера

23
00:03:28,320 --> 00:03:36,240
является переменная среды DISPLAY. DISPLAY состоит
 из имени хоста, номера дисплея и номера экрана.

24
00:03:47,600 --> 00:03:58,720
Имя хоста является необязательным. Его отсутствие означает localhost.
 Номер дисплея -- это уникальный идентификатор для этого X-сервера,

25
00:03:58,720 --> 00:04:06,000
который обязательно должен присутствовать
 в спецификации дисплея. А номер экрана --

26
00:04:08,480 --> 00:04:13,040
это необязательный параметр в случае
 многоэкранной конфигурации X-сервера.

27
00:04:13,040 --> 00:04:16,240
Давайте попробуем поиграть с этим.

28
00:04:17,440 --> 00:04:32,960
Сначала мы переключимся на другую виртуальную консоль,
 например, на вторую, с помощью 'Ctrl+Alt+F2'.

29
00:04:38,880 --> 00:04:47,120
На самом деле, в Linux у нас есть двенадцать виртуальных консолей
 по количеству функциональных клавиш на клавиатуре.

30
00:04:47,120 --> 00:04:57,520
И мы можем переключаться между ними,
 используя сочетание Ctrl+Alt+функциональная клавиша.
 На некоторых из них мы видим приглашение для входа

31
00:04:59,600 --> 00:05:07,760
и можем войти в систему. Теперь давайте запустим X-сервер:

32
00:05:07,760 --> 00:05:12,320
$ X (EE)
Fatal server error: (EE) Server is already active for display 0...

33
00:05:12,320 --> 00:05:19,440
Это ожидаемо -- у нас в системе уже есть работающий X-сервер,

34
00:05:19,440 --> 00:05:30,162
занимающий нулевой дисплей. Что ж, это не проблема --
 попробуем запустить на следующем дисплее:

35
00:05:30,162 --> 00:05:30,662
$ X: 1

36
00:05:31,676 --> 00:05:34,320
Результат выглядит как черный экран

37
00:05:35,120 --> 00:05:37,840
без каких-либо графических элементов.

38
00:05:40,240 --> 00:05:52,880
Что-то не так? Ну нет -- на четвертом виртуальном экране
 снова войдём в систему и установим переменную DISPLAY:

39
00:05:52,880 --> 00:05:53,373
$ export DISPLAY=:1

40
00:05:53,373 --> 00:05:56,640
Теперь давайте запустим старый добрый

41
00:05:57,200 --> 00:06:01,532
терминальный интерфейс -- приложение `xterm`:

42
00:06:01,532 --> 00:06:01,840
$ xterm

43
00:06:01,840 --> 00:06:09,520
OK. Переходим к третьей виртуальной консоли, где мы оставили наш X-сервер.

44
00:06:14,400 --> 00:06:27,120
Отлично -- мы видим терминал! Но что странно -- мы можем что-то напечатать,

45
00:06:28,480 --> 00:06:33,840
лишь находясь в окне терминала,

46
00:06:40,000 --> 00:06:47,840
мы не можем перемещать или изменять его размер,
 более того, у нас нет кнопки для его закрытия!

47
00:06:49,840 --> 00:07:01,360
И это просто потому, что у нас есть система, разработанная
 на основе парадигмы KISS -- xterm лишь эмулирует терминал.

48
00:07:01,360 --> 00:07:11,520
Если мы хотим переместить или изменить размер окон
 (а, к примеру, для информационного киоска нам это не нужно),

49
00:07:15,520 --> 00:07:22,400
нам понадобится специальная программа -- оконный менеджер.

50
00:07:23,680 --> 00:07:31,040
Давайте запустим его на `xterm`,
 стартовав одну из графических

51
00:07:31,040 --> 00:07:33,214
 пользовательских сред -- GNOME:

52
00:07:33,214 --> 00:07:40,240
$ gnome-session &

53
00:07:40,240 --> 00:07:44,560
OK. Теперь у нас есть полностью функциональная графическая

54
00:07:44,560 --> 00:07:52,480
пользовательская система, в которой мы можем работать
 с графическими приложениями обычными способами.

55
00:07:52,480 --> 00:08:00,240
Еще один важный момент -- это геометрия.

56
00:08:00,240 --> 00:08:18,240
GEOMETRY мы можем установить,
 задав ШИРИНУ, ВЫСОТУ и сдвиг по осям X и Y.

57
00:08:18,640 --> 00:08:24,000
С помощью этого параметра мы можем установить
 положение и размер окна приложения

58
00:08:29,740 --> 00:08:31,000
таким образом:

59
00:08:31,000 --> 00:09:10,240
$ xterm -geometry 100x30 + 10 + 10
$ xterm -geometry 150x50 + 100 + 100

60
00:09:10,240 --> 00:09:18,640
Как мы видим, мы получили два xterm'а с разной геометрией.

61
00:09:18,640 --> 00:10:08,160
И, наконец, мы можем выбрать цвета для приложений,
 такие настройки поддерживающих. XWindow позволяет

62
00:10:08,160 --> 00:10:17,840
использовать абстрактные названия цветов,
 описанных в файле конфигурации /usr/share/X11/rgb.txt.

63
00:10:19,440 --> 00:10:31,840
В этом файле мы можем видеть пропорции красного,
 зеленого и синего цветов для названных определений цвета.

64
00:10:37,210 --> 00:10:41,280
$ xterm -bg blue -fg red

65
00:10:41,280 --> 00:10:48,400
Еще один нетривиальный момент -- шрифты. XWindow поддерживает как фиксированные растровые, так и масштабируемые векторные шрифты.

66
00:10:49,040 --> 00:10:56,080
В последнем случае можно использовать так называемые
 серверы шрифтов для удаленного рендеринга

67
00:10:56,640 --> 00:11:06,560
масштабируемых шрифтов в растровое представление,
 что было полезно для простых X-терминалов.

68
00:11:08,000 --> 00:11:14,000
Классические шрифты XWindow обрабатываются утилитами:

69
00:11:14,880 --> 00:11:19,680
`xfontsel`,` xfd` и `xlsfonts`.

70
00:11:19,680 --> 00:11:28,840
Например:
$ xfontsel

71
00:11:57,440 --> 00:12:10,960
В спецификации шрифта мы видим имя производителя, тип, разновидность,

72
00:12:10,960 --> 00:12:15,760
размер, разрешение, кодировку и так далее:

73
00:12:15,760 --> 00:12:16,300
-adobe-courier-medium -? - normal - 10-100-75-75- m-60-iso8859- *

74
00:12:16,300 --> 00:12:23,840
Имена шрифтов обычно довольно длинные,
 поскольку они содержат всю информацию,

75
00:12:26,000 --> 00:12:30,160
необходимую для однозначной идентификации отдельных шрифтов.

76
00:12:31,280 --> 00:12:39,920
Однако X-сервер поддерживает подстановочные знаки
 в именах шрифтов для заполнения спецификации.

77
00:12:42,720 --> 00:12:48,160
Это хорошо, но недостаточно для современного мира

78
00:12:49,440 --> 00:12:56,080
WYSIWYG (What You See Is What You Get). Стандартная парадигма XWindow

79
00:12:56,080 --> 00:13:04,800
ничего не знает о презентации на бумаге, система работает
 только с экранным представлением. Все документы

80
00:13:04,800 --> 00:13:11,760
обрабатываются приложениями, создающими вывод
 на языке PostScript для высококачественной печати.

81
00:13:12,320 --> 00:13:21,920
Но с повсеместным распространением офисных пакетов
 этой парадигмы оказывается недостаточно.

82
00:13:21,920 --> 00:13:30,720
Для современных графических интерфейсов WYSIWYG был разработан

83
00:13:30,720 --> 00:13:41,360
новый движок шрифтов -- FontConfig, который работает
 со шрифтами PostScript и TrueType и обрабатывается

84
00:13:42,640 --> 00:13:48,840
утилитами: `fc-cache`,` fc-list`, `fc-cat` и` fc-match`.

85
00:13:48,840 --> 00:13:52,320
Классические приложения XWindow создаются

86
00:13:52,960 --> 00:14:00,240
с использованием библиотеки XToolkit
 и обычно поддерживают стандартный набор

87
00:14:00,240 --> 00:14:09,520
параметров. Наиболее часто используемые:
* -display -- имя используемого X-сервера

88
00:14:09,520 --> 00:14:15,840
* -geometry -- начальный размер и расположение окна

89
00:14:15,840 --> 00:14:23,760
* -title -- заголовок окна
* -bg, -background, -fg, -foreground -- цвет фона/переднего плана окна

90
00:14:25,920 --> 00:14:32,560
* -fn, -font -- шрифт, используемый для отображения текста

91
00:14:32,560 --> 00:14:41,920
и некоторые опции, связанные с ресурсами:
* -name -- имя, под которым производится поиск

92
00:14:42,800 --> 00:14:50,640
ресурсов для приложения и
* -xrm -- имя ресурса и значение

93
00:14:50,640 --> 00:14:53,200
для переопределения любых значений по умолчанию.

94
00:14:55,040 --> 00:15:05,760
Что такое это ресурсы XWindow? Они, описаны
 на страницах руководств приложений

95
00:15:06,960 --> 00:15:18,480
и могут использоваться для настройки параметров по умолчанию
 для приложений XWindow. Ресурсы должны находиться

96
00:15:20,080 --> 00:15:23,520
в файле `.Xdefaults` или` .Xresources`

97
00:15:24,960 --> 00:15:36,800
в каталоге $HOME и могут обрабатываться утилитой `xrdb` на лету.

98
00:15:36,800 --> 00:15:40,880
Описание выглядит так:

99
00:15:40,880 --> 00:15:45,920
obj.subobj [.subobj] .attr: value

100
00:15:45,920 --> 00:15:53,040
Интересно, что в XWindow объектно-ориентированная парадигма
 была реализована еще до того, как она была реализована

101
00:15:53,040 --> 00:16:01,280
в известных языках программирования. Компоненты программы
 именуются в иерархическом порядке,

102
00:16:02,400 --> 00:16:09,200
причем каждый узел в иерархии
 идентифицируется классом и именем экземпляра.

103
00:16:10,560 --> 00:16:18,880
На верхнем уровне находится класс и имя экземпляра
 самого приложения. По соглашению,

104
00:16:18,880 --> 00:16:29,840
имя класса приложения совпадает с именем программы,
 но с заглавной первой буквой:

105
00:16:29,840 --> 00:16:30,720
* Obj - имя класса
* obj - имя экземпляра

106
00:16:30,720 --> 00:16:32,400
Некоторые примеры ресурсов:

107
00:16:32,400 --> 00:16:36,560
XTerm*Font: 6x10
emacs*Background:  rgb:5b/76/86

108
00:16:36,560 --> 00:16:46,640
Пользовательский интерфейс GNOME использует
 собственные средства управления ресурсами --

109
00:16:48,000 --> 00:16:58,320
Gconf и соответствующие инструменты для работы с ним:
 `gconf-editor` и` gconftool-2`.

