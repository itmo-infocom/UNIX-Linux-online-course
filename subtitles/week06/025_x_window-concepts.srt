1
00:00:05,120 --> 00:00:15,920
The history of the UNIX graphics 
system goes back to the 1984  

2
00:00:18,160 --> 00:00:25,520
MIT Athena education project. 
Athena was not a research project,  

3
00:00:26,480 --> 00:00:36,720
and the development of new models of computing 
was not a primary objective of the project.  

4
00:00:37,280 --> 00:00:50,320
Indeed, quite the opposite was true. MIT wanted a 
high-quality computing environment for education.

5
00:00:51,280 --> 00:00:57,760
In collaboration with DEC and IBM, the project 
developed a platform-independent graphics system  

6
00:00:57,760 --> 00:01:07,360
to link together different systems from multiple 
vendors through a protocol that can both run local  

7
00:01:07,360 --> 00:01:19,920
and remote applications. This system was the basis 
of the X-Window System, which began its growth in  

8
00:01:21,280 --> 00:01:28,480
1985 and was ported to various 
UNIX and not just UNIX platforms.

9
00:01:30,000 --> 00:01:36,800
We now have several successors to 
the classic X-Window system, the  

10
00:01:36,800 --> 00:01:46,880
most famous being the Android on mobile devices 
or Wayland graphics system on Linux desktops, but  

11
00:01:47,600 --> 00:01:58,960
X-Windows is still widely used today. And we will 
discuss some non-trivial concepts related to this.  

12
00:01:59,920 --> 00:02:04,880
To see them just look into manual page:

13
00:02:04,880 --> 00:02:08,840
$ man X

14
00:02:10,320 --> 00:02:19,840
First of all, the X-Window System 
is a network oriented client-server  

15
00:02:19,840 --> 00:02:26,560
architecture. But the relationship 
between the client and the server doesn't  

16
00:02:29,040 --> 00:02:35,840
seem very clear at first 
glance. Generally, the X server  

17
00:02:36,720 --> 00:02:46,480
simply accepts requests from various client 
programs to display graphics (application windows)  

18
00:02:47,120 --> 00:02:58,400
and sends back user input (from keyboard, mouse, 
or touchscreen). And the server for ex. will  

19
00:02:58,400 --> 00:03:08,800
run on your tablet, and the apps that run 
on the supercomputer are just clients.

20
00:03:09,760 --> 00:03:16,400
The main principle of X-Window: 
“Provide mechanism rather  

21
00:03:16,400 --> 00:03:23,520
than policy. In particular, place user 
interface policy in the client's hands."

22
00:03:24,240 --> 00:03:27,440
And the main locator for the  

23
00:03:28,320 --> 00:03:36,240
X server is the DISPLAY environment variable. DISPLAY consist from host name, display number and screen number. 

24
00:03:47,600 --> 00:03:58,720
Host name is optional. Its absence means localhost. 
The display number is a unique identifier for  

25
00:03:58,720 --> 00:04:06,000
this X server and should always appear in the 
display specification. And the screen number  

26
00:04:08,480 --> 00:04:13,040
is an optional parameter for 
multi-screen X server configuration.

27
00:04:13,040 --> 00:04:16,240
Let's try to play with this.  

28
00:04:17,440 --> 00:04:32,960
First, we will switch to another virtual console, 
for example to second one by 'Ctrl+Alt+F2'.  

29
00:04:38,880 --> 00:04:47,120
Actually, in Linux we have twelve virtual consoles 
by number of function keys on keyboard. And we can  

30
00:04:47,120 --> 00:04:57,520
switch between them using 'Ctrl+Alt+function 
key'. On some of them, we see a login prompt  

31
00:04:59,600 --> 00:05:07,760
and can log in here. Now let's run X server:

32
00:05:07,760 --> 00:05:12,320
$ X
(EE) Fatal server error:
(EE) Server is already active for display 0...

33
00:05:12,320 --> 00:05:19,440
This is expected - we already have 
a running X-server in the system,  

34
00:05:19,440 --> 00:05:30,162
which occupies a zero display. This is not a 
problem -- let's try to run on the next display:

35
00:05:30,162 --> 00:05:30,171
$ X :1

36
00:05:31,676 --> 00:05:34,320
It looks like a black screen  

37
00:05:35,120 --> 00:05:37,840
without any graphic elements.  

38
00:05:40,240 --> 00:05:52,880
Something is wrong? Oh no... On the fourth virtual 
screen, login again and set the DISPLAY variable: 

39
00:05:52,880 --> 00:05:53,373
$ export DISPLAY=:1 

40
00:05:53,373 --> 00:05:56,640
Now let's start the good old  

41
00:05:57,200 --> 00:06:01,532
terminal interface -- the `xterm` application:

42
00:06:01,532 --> 00:06:01,840
$ xterm

43
00:06:01,840 --> 00:06:09,520
OK. Let's go to the third virtual 
console, where we left our X server.  

44
00:06:14,400 --> 00:06:27,120
Great -- we see the terminal! But this 
is strange -- we can only print something  

45
00:06:28,480 --> 00:06:33,840
while staying in the terminal window,  

46
00:06:40,000 --> 00:06:47,840
we cannot move or resize it, moreover, 
we do not have a button to destroy it!

47
00:06:49,840 --> 00:07:01,360
It's just because we have a system developed 
on the KISS paradigm -- `xterm` just emulates  

48
00:07:01,360 --> 00:07:11,520
a terminal. If we want to move or resize 
windows (for example, we don't need this  

49
00:07:15,520 --> 00:07:22,400
for an information kiosk), we need a special 
program for this -- a window manager.  

50
00:07:23,680 --> 00:07:31,040
Let's run it on `xterm` by 
starting one of the graphical user  

51
00:07:31,040 --> 00:07:33,214
environments - GNOME:

52
00:07:33,214 --> 00:07:40,240
$ gnome-session &

53
00:07:40,240 --> 00:07:44,560
OK. We now have a fully functional graphical  

54
00:07:44,560 --> 00:07:52,480
user system in which we can work with 
graphical applications in the usual ways.

55
00:07:52,480 --> 00:08:00,240
Another important thing is a geometry.

56
00:08:00,240 --> 00:08:18,240
GEOMETRY we can set by setting the WIDTH, HEIGHT and shift to X and Y axes.

57
00:08:18,640 --> 00:08:24,000
With this parameter, we can set the 
position and size of the application window: 

58
00:08:29,740 --> 00:08:31,000
By this way:

59
00:08:31,000 --> 00:09:10,240
$ xterm -geometry 100x30+10+10 
$ xterm -geometry 150x50+100+100

60
00:09:10,240 --> 00:09:18,640
As we can see we got two xterms with different geometries.

61
00:09:18,640 --> 00:10:08,160
And finally, we can choose colors for applications 
that support such settings. X supports the use

62
00:10:08,160 --> 00:10:17,840
of abstract color names as described in the 
configuration file /usr/share/X11/rgb.txt.  

63
00:10:19,440 --> 00:10:31,840
In this file, we can see the red, green and 
blue values for the named color definitions. 

64
00:10:37,210 --> 00:10:41,280
$ xterm -bg blue -fg red

65
00:10:41,280 --> 00:10:48,400
Another non-trivial point is fonts. XWindow 
supports both bitmaps and scalable fonts.  

66
00:10:49,040 --> 00:10:56,080
In the latter case, it's possible to 
use so-called font servers to remotely  

67
00:10:56,640 --> 00:11:06,560
render scalable fonts to bitmap, which 
was useful for low-level X terminals.

68
00:11:08,000 --> 00:11:14,000
Classic XWindow fonts are handled by utilities:  

69
00:11:14,880 --> 00:11:19,680
`xfontsel`, `xfd` and `xlsfonts`.

70
00:11:19,680 --> 00:11:28,840
For example:
$ xfontsel 

71
00:11:57,440 --> 00:12:10,960
In the font specification, we see the 
manufacturer's name, type, variety,  

72
00:12:10,960 --> 00:12:15,760
size, resolution, encoding, and so on:

73
00:12:15,760 --> 00:12:16,300
-adobe-courier-medium-?-normal--10-100-75-75-m-60-iso8859-*

74
00:12:16,300 --> 00:12:23,840
Font names tend to be fairly long as 
they contain all of the information  

75
00:12:26,000 --> 00:12:30,160
needed to uniquely identify individual fonts.  

76
00:12:31,280 --> 00:12:39,920
However, the X server supports wildcarding 
of font names, so the full specification.

77
00:12:42,720 --> 00:12:48,160
This is good, but not good enough for the modern  

78
00:12:49,440 --> 00:12:56,080
WYSIWYG (What You See Is What You Get) 
world. The standard XWindow paradigm knows  

79
00:12:56,080 --> 00:13:04,800
nothing about presentation on paper, only 
on screen. All documents are executed by  

80
00:13:04,800 --> 00:13:11,760
applications creating PostScript language 
output for high quality printing.

81
00:13:12,320 --> 00:13:21,920
And with the widespread distribution of 
office suites, this paradigm turns out  

82
00:13:21,920 --> 00:13:30,720
to be insufficient. For the modern WYSIWYG 
graphical interfaces, a new font engine has  

83
00:13:30,720 --> 00:13:41,360
been developed -- FontConfig, which works with 
PostScript and TrueType fonts and is processed  

84
00:13:42,640 --> 00:13:48,840
by utilities: `fc-cache`, 
`fc-list`, `fc-cat` and `fc-match`.

85
00:13:48,840 --> 00:13:52,320
Classic XWindow applications are  

86
00:13:52,960 --> 00:14:00,240
built using the XToolkit library and 
generally support a standard set of  

87
00:14:00,240 --> 00:14:09,520
options. The most commonly used:
* -display – name of the X server to use 

88
00:14:09,520 --> 00:14:15,840
* -geometry – initial size 
and location of the window 

89
00:14:15,840 --> 00:14:23,760
* -title – window title
* -bg, -background, -fg, -foreground –  

90
00:14:25,920 --> 00:14:32,560
background/foreground color for window
* -fn, -font – font to use for displaying text 

91
00:14:32,560 --> 00:14:41,920
and some resources related options:
* -name – name under which resources  

92
00:14:42,800 --> 00:14:50,640
for the application should be found and
* -xrm – resource name and value  

93
00:14:50,640 --> 00:14:53,200
to override any defaults

94
00:14:55,040 --> 00:15:05,760
What is it XWindow resources? They described 
in the manual pages for such applications  

95
00:15:06,960 --> 00:15:18,480
can be used to customize the default settings for 
XWindow applications. Resources must be located in  

96
00:15:20,080 --> 00:15:23,520
the `.Xdefaults` or `.Xresources`  

97
00:15:24,960 --> 00:15:36,800
file in the $HOME directory and can be 
processed by the `xrdb` utility on the fly.

98
00:15:36,800 --> 00:15:40,880
The description looks like this:

99
00:15:40,880 --> 00:15:45,920
obj.subobj[.subobj].attr: value

100
00:15:45,920 --> 00:15:53,040
And in XWindow, the object-oriented paradigm 
was implemented even before it was implemented  

101
00:15:53,040 --> 00:16:01,280
in well-known programming languages. Program 
components are named in a hierarchical fashion,  

102
00:16:02,400 --> 00:16:09,200
with each node in the hierarchy identified 
by a class and an instance name.  

103
00:16:10,560 --> 00:16:18,880
At the top level is the class and instance name of 
the application itself. By convention, the class  

104
00:16:18,880 --> 00:16:29,840
name of the application is the same as the program 
name, but with the first letter capitalized: 

105
00:16:29,840 --> 00:16:30,720
* Obj – class name
* obj – instance name

106
00:16:30,720 --> 00:16:32,400
Some examples of resources:

107
00:16:32,400 --> 00:16:36,560
XTerm*Font: 6x10
emacs*Background:  rgb:5b/76/86

108
00:16:36,560 --> 00:16:46,640
GNOME user interface uses its own 
resource management -- Gconf and tools  

109
00:16:48,000 --> 00:16:58,320
for working with it: 
`gconf-editor` and `gconftool-2`.

