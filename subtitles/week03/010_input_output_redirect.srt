1
00:00:06,609 --> 00:00:16,059
The standard design pattern for UNIX commands
is to read information from the standard input

2
00:00:16,059 --> 00:00:25,850
stream (by default -- the keyboard of the
current terminal), and write to standard output

3
00:00:25,850 --> 00:00:35,640
(by default -- terminal screen), and redirect
errors to standard error stream (also the

4
00:00:35,640 --> 00:00:45,440
terminal screen), unless specified in the
command parameters anything else.

5
00:00:45,440 --> 00:00:51,570
These defaults settings can be changed by
the shell.

6
00:00:51,570 --> 00:01:03,680
The command ends with a sign "greater than"
and the file name, means redirecting standard

7
00:01:03,680 --> 00:01:07,310
output to that file.

8
00:01:07,310 --> 00:01:17,170
The application code does not change, but
the data it sends to the screen will be placed

9
00:01:17,170 --> 00:01:20,249
in this file.

10
00:01:20,249 --> 00:01:32,029
And the command ends with a "less than" sign
and a file name, which means redirecting standard

11
00:01:32,029 --> 00:01:38,340
input from that file.

12
00:01:38,340 --> 00:01:47,649
All data that the application expects from
the keyboard is read from the file.

13
00:01:47,649 --> 00:01:57,750
Double "greater than" means append to the
output file.

14
00:01:57,750 --> 00:02:05,439
Number two with "greater than" means redirecting
standard error to a file.

15
00:02:05,439 --> 00:02:14,150
By default, stderr also prints to the screen
and in this way we can separate this stream

16
00:02:14,150 --> 00:02:20,060
from stdin and redirect to this file.

17
00:02:20,060 --> 00:02:24,260
And finally, such a magic formula:

18
00:02:25,360 --> 00:02:36,260
This means stdout and stderr are combined
into one stream.

19
00:02:36,260 --> 00:02:45,020
You can know more about the meaning of this
combination of symbols from our

20
00:02:45,020 --> 00:02:49,780
"Under the hood -- about streams numbers" lecture.

21
00:02:49,780 --> 00:02:55,269
You may use it with other redirection, for
example

22
00:02:55,269 --> 00:02:58,420
by this way.

23
00:02:58,420 --> 00:03:04,790
This means to redirect standard output to

24
00:03:04,790 --> 00:03:12,500
one "file", both standard output and standard
error streams.

25
00:03:12,500 --> 00:03:18,640
But keep in mind -- such combinations are
not equivalent:

26
00:03:20,310 --> 00:03:29,629
In the second case, you first concatenate

27
00:03:29,629 --> 00:03:39,550
the streams and then split again by redirecting
stdout to the selected file.

28
00:03:39,550 --> 00:03:49,910
In this case, only the stdout stream will be
put into the file, stderr will be displayed

29
00:03:49,910 --> 00:03:53,330
on the screen.

30
00:03:53,330 --> 00:03:59,779
The order of the redirection operations is
important!

31
00:03:59,779 --> 00:04:11,640
So the question is: what are we missing in
terms of symmetry?

32
00:04:11,640 --> 00:04:16,799
It's obvious -- double "less than" sign.

33
00:04:16,799 --> 00:04:24,430
And this combination also exists!

34
00:04:24,430 --> 00:04:31,160
But what can this combination means?

35
00:04:31,160 --> 00:04:35,590
Append something to standard input?

36
00:04:35,590 --> 00:04:40,240
But this is nonsense.

37
00:04:40,240 --> 00:04:45,220
Actually this combination is used for the
so-called "Here-document".

38
00:04:46,220 --> 00:04:52,090
After the double "less than" some label is

39
00:04:52,090 --> 00:05:01,319
placed (END_LABEL in our case) and all text
from the next line to END_LABEL is sent to

40
00:05:01,319 --> 00:05:07,120
the program's standard input, as if from the
keyboard.

41
00:05:07,120 --> 00:05:15,960
Be careful, in some older shells this sequence
of commands expects exactly what you wrote.

42
00:05:15,960 --> 00:05:26,680
And if you wrote a space before END_LABEL
just for beauty, the shell will only wait

43
00:05:26,680 --> 00:05:32,389
for the same character string with a leading
space.

44
00:05:32,389 --> 00:05:39,849
And if this line is not found, the redirection
from "here document" continues to the end

45
00:05:39,849 --> 00:05:46,379
of file and may be the source of some unclear
errors.

46
00:05:46,379 --> 00:05:51,430
And finally, the pipelines.

47
00:05:51,430 --> 00:06:03,620
They are created with a pipe symbol placed
between commands.

48
00:06:03,620 --> 00:06:15,530
This means connecting the standard output
from the first command to the standard input

49
00:06:15,530 --> 00:06:22,159
of the second command.

50
00:06:22,159 --> 00:06:31,659
After that, all the data that the first command
sending to the screen will be sent

51
00:06:31,659 --> 00:06:40,419
to the pipe, from which the second command
will be read as from the keyboard.

52
00:06:40,419 --> 00:06:46,270
Programs designed in this redirection and
pipelining paradigm are very easy to implement

53
00:06:46,270 --> 00:06:54,599
and test, but such powerful interprocess communication
tools help us create very complex combinations

54
00:06:54,599 --> 00:06:57,379
of interacting programs.

55
00:06:57,379 --> 00:06:58,620
For example as such.

56
00:07:01,730 --> 00:07:08,349
The first program receives data from the file

57
00:07:08,349 --> 00:07:18,960
by redirecting stdin, sends the result of
the work to the pipeline through stdout and

58
00:07:18,960 --> 00:07:33,860
after a long way through the chain of filters
in the end the last command sends the results

59
00:07:33,860 --> 00:07:38,939
to stdout which is redirected to the result
file.

60
00:07:38,939 --> 00:07:51,520
Interestingly, some I/O redirection is supported
in MS OSes, but with some unexpected specifics.

61
00:07:51,520 --> 00:07:57,200
See details in "Under the Hood" -- Text handling
in Windows lecture.

