1
00:00:05,200 --> 00:00:12,240
Все команды, вводимые в командной строке
 или выполняемые в командном файле, являются

2
00:00:13,440 --> 00:00:25,440
 либо командами, встроенными в интерпретатор,
 либо внешними исполняемыми файлами. Набор встроенных команд

3
00:00:25,440 --> 00:00:32,320
довольно мал, что определяется базовой концепцией -- UNIX-система

4
00:00:33,120 --> 00:00:37,760
должна состоять из небольших программ,
 которые выполняют довольно простые

5
00:00:37,760 --> 00:00:45,280
четко определенные функции, которые взаимодействуют
 друг с другом через стандартные интерфейсы.

6
00:00:47,040 --> 00:00:52,000
Богатый набор стандартных утилит --
 старая добрая традиция для UNIX-подобных систем.

7
00:00:52,000 --> 00:00:59,040
Оболочка и традиционный набор утилит UNIX являются стандартом POSIX.

8
00:01:00,400 --> 00:01:08,240
Как мы обсуждали ранее, у нас есть разные варианты UNIX-подобных систем

9
00:01:08,800 --> 00:01:14,600
с разными типами утилит:

10
00:01:18,880 --> 00:01:25,840
* BSD-подобные, восходящие к исходным реализациям UNIX;

11
00:01:25,840 --> 00:01:39,840
* Системы на основе SYSV;
* Утилиты GNU.

12
00:01:42,160 --> 00:01:51,440
Синтаксис некоторых команд был изменен USL с введением SYSV,

13
00:01:52,480 --> 00:01:54,640
но в большинство коммерческих UNIX-систем

14
00:01:57,920 --> 00:02:08,240
все еще был включен набор старых команд
 для совместимости с более ранними версиями UNIX

15
00:02:08,240 --> 00:02:18,960
на основе BSD от того же производителя. Утилиты GNU
 часто сочетают оба синтаксиса и добавляют собственные

16
00:02:18,960 --> 00:02:29,280
улучшения к традиционным утилитам. И теперь
 инструментарий GNU стал стандартом де-факто.

17
00:02:30,240 --> 00:02:40,320
Исполняемые файлы в UNIX-подобных системах не имеют
 каких-либо требований к расширению имени файла, как в Windows. 

18
00:02:40,320 --> 00:02:53,280
Исполняемый файл утилиты может иметь любое имя,
 но должен иметь разрешение на выполнение для

19
00:02:55,760 --> 00:02:58,280
пользователя, который хочет его запустить.

20
00:02:58,280 --> 00:03:06,240
Стандартная утилита может иметь параметры,
 аргументы параметров и операнды.

21
00:03:12,080 --> 00:03:17,600
Аргументы командной строки программ обычно разбираются

22
00:03:32,880 --> 00:03:40,240
функцией getopt(), которая фактически определяет форму параметров

23
00:03:40,240 --> 00:03:48,080
при вызове команды. Это пример

24
00:03:48,720 --> 00:03:53,440
краткого описания утилиты.

25
00:03:53,440 --> 00:03:56,000
Утилита в этом примере называется utility_name.

26
00:03:57,600 --> 00:04:08,240
За ним следуют параметры, параметры-аргументы
 и операнды. Аргументы, состоящие

27
00:04:10,640 --> 00:04:23,640
из символа <тире/дефис/минус> и отдельных букв или цифр, таких как 'a',

28
00:04:26,640 --> 00:04:32,160
известны как «параметры» (или, исторически, «флаги»).

29
00:04:32,800 --> 00:04:41,680
За некоторыми параметрами следует «аргумент-параметр», как показано с «c»

30
00:04:43,440 --> 00:04:52,720
option_argument. Аргументы, следующие за последними опциями и аргументами опций, названных «operands».

31
00:04:54,160 --> 00:05:07,840
Функция GNU getopt() поддерживает так называемые длинные параметры, которые начинаются с двух дефисов и могут

32
00:05:07,840 --> 00:05:11,669
использовать полное или сокращенное имя параметра.

33
00:05:12,171 --> 00:05:18,560
Option-arguments отображаются отделенными
 от своих параметров пробельными символами,

34
00:05:19,360 --> 00:05:24,960
за исключением случаев, когда option-argument
 заключен в «квадратные скобки»,

35
00:05:26,560 --> 00:05:31,440
чтобы указать, что он не является обязательным.

36
00:05:32,160 --> 00:05:39,760
В длинных опциях GNU getopt также может
 использоваться знак «равно» между

37
00:05:42,000 --> 00:05:44,059
опцией и аргументом опции.

38
00:05:46,421 --> 00:05:54,720
Когда у утилиты есть только несколько допустимых опций,
 они иногда отображаются индивидуально, как в примере. 

39
00:05:58,800 --> 00:06:06,000
Для утилит с множеством флагов обычно комбинируют отдельные флаги

40
00:06:06,960 --> 00:06:12,560
(которые не принимают аргументы-параметры)
 сгруппированными вместе, как в этом примере.

41
00:06:14,656 --> 00:06:16,400
Утилиты с очень сложными аргументами

42
00:06:18,400 --> 00:06:23,480
могут быть показаны следующим образом.

43
00:06:26,035 --> 00:06:30,800
Аргументы, разделенные знаком "|" («вертикальная черта»)

44
00:06:32,480 --> 00:06:35,528
взаимоисключающие.

45
00:06:36,560 --> 00:06:42,560
В качестве альтернативы взаимоисключающие опции
 и операнды могут быть перечислены

46
00:06:46,240 --> 00:06:47,840
в нескольких строках описания синтаксиса.

47
00:06:47,840 --> 00:06:50,640
Как показано тут.

48
00:06:51,613 --> 00:07:06,160
Многоточия используются для обозначения того, что допускается использование одного или более операндов.

