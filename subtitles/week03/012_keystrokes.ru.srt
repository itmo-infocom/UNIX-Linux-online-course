1
00:00:06,560 --> 00:00:14,320
Несколько слов о комбинациях клавиш.
Как мы увидим, они могут быть довольно полезны

2
00:00:15,680 --> 00:00:17,440
для работы в командной строке. Давайте посмотрим:

3
00:00:18,840 --> 00:00:28,640
* erase – удалить один символ: [Backspace] 
или [Ctrl]-[H], или [Ctrl]-[?], или [Delete] 

4
00:00:28,640 --> 00:00:40,880
* werase – удалить слово: [Ctrl]-[W]
* kill – стереть всю строку: [Ctrl]-[U].  

5
00:00:41,760 --> 00:00:48,960
Это может быть довольно полезно, когда вы ошиблись
при вводе чего-то в строке, где не отображаются символы,

6
00:00:48,960 --> 00:00:51,080
например, при вводе пароля.

7
00:00:52,560 --> 00:00:59,360
* rprnt – обновить выведенную информацию: [Ctrl]-[R]
* Убить текущий процесс – [Ctrl]-[C] или [Delete].

8
00:00:59,360 --> 00:01:07,840
На самом деле, эта довольно странная
настройка для клавиши [Delete]

9
00:01:09,200 --> 00:01:22,160
использовалась некоторыми старыми вариантами UNIX.
И это частенько обескураживало, когда при попытке удалить

10
00:01:22,160 --> 00:01:31,520
неправильно введенные символы
убивалось выполняющееся приложение.

11
00:01:31,520 --> 00:01:43,440
[Ctrl]-[\] -- убить текущий процесс
с образованием дампа памяти (memory dump).

12
00:01:45,120 --> 00:01:55,120
Такой дамп можно использовать для анализа
 внутреннего состояния программ отладчиком.

13
00:01:55,120 --> 00:02:03,600
Он может быть создан в системе автоматически во время
 сбоя программы, если вы настроили свою систему

14
00:02:04,160 --> 00:02:14,560
соответствующим образом, или так --
нажатием клавиш [Ctrl]-[\] для анализа состояния,

15
00:02:14,560 --> 00:02:23,360
например, зависшей программы. Более подробную
 информацию о дампе вы можете найти в лекции

16
00:02:23,360 --> 00:02:29,040
«Под капотом -- Core dump».
[Ctrl]-[S] -- застопоприть текущий процесс. 

17
00:02:29,040 --> 00:02:37,280
и [Ctrl]-[Q] -- продолжить выполнение
приостановленного процесса.

18
00:02:37,920 --> 00:02:50,080
И если программа выглядит подвисшей,
первым делом попробуйте нажать [Ctrl]-[Q].

19
00:02:50,080 --> 00:02:55,360
Возможно вы случайно нажали [Ctrl]-[S].
* eof – [Ctrl]-[D]. Конец файла.

20
00:02:58,240 --> 00:03:03,840
Может быть использован для
завершения ввода чего-либо.

21
00:03:03,840 --> 00:03:15,760
* susp – [Ctrl]-[Z]. Как вы, наверное, знаете,
 это означает EOF в системах Microsoft. 

22
00:03:15,760 --> 00:03:23,600
Но в UNIX-подобных системах это останавливает  текущий процесс
 и отключает его от текущей терминальной линии.

23
00:03:24,480 --> 00:03:32,480
После этого выполнение этого процесса можно
 продолжить в обычном или фоновом режиме.

24
00:03:33,680 --> 00:03:44,400
Сочетания клавиш для KSH и Bash.
* [ЕЅС]-[ЕЅС] или [Tab] – Авто-дописывание для

25
00:03:45,040 --> 00:03:56,000
файлов и каталогов. Это очень полезно для работы
 с UNIX-подобными файловыми системами

26
00:03:56,000 --> 00:04:05,280
с их глубокой иерархической вложенностью. К примеру, как мы увидим далее,

27
00:04:05,280 --> 00:04:12,880
три уровня вложенности -- это обычная ситуация для таких систем.
Конечно, мы можем использовать интерфейсы управления файлами,

28
00:04:12,880 --> 00:04:21,760
такие как графические файловые менеджеры или текстовые
 файловые менеджеры, такие как Midnight Commander (mc), 

29
00:04:21,760 --> 00:04:29,360
напоминающий классический Norton Commander. Но, как мы увидим, 

30
00:04:30,480 --> 00:04:38,560
в большинстве случаев механизм автозаполнения ускоряет навигацию
в файловой системе и может быть проще, если вы знаете, что ищете.

31
00:04:39,840 --> 00:04:49,680
Чтобы использовать этот механизм, вам просто нужно начать вводить то,
 что вы хотите (имя команды, путь к файлу или имя переменной среды)

32
00:04:49,680 --> 00:04:59,280
 и по нажатию [Tab] Shell попытается помочь вам дописать слово.

33
00:05:08,800 --> 00:05:16,160
Если будет найдено однозначное совпадение,
 Shell просто допишет то, что вы начали набирать.

34
00:05:17,120 --> 00:05:23,840
А если есть несколько вариантов продолжения,

35
00:05:32,960 --> 00:05:42,960
Shell выведет их и будет ждать новых символов
 для поиска однозначного соответствия

36
00:05:43,600 --> 00:05:44,729
тому, что начали писать.

37
00:05:48,958 --> 00:05:50,880
Другие сочетания клавиш Shell: 

38
00:05:50,880 --> 00:05:56,800
* [Ctrl]-[P] – Перейти к предыдущей команде в "истории"

39
00:05:56,800 --> 00:06:04,080
* [Ctrl]-[N] – Перейти к следующей команде в "истории"
* [Ctrl]-[F] – Передвинуть курсор на один символ вперед

40
00:06:04,080 --> 00:06:13,520
* [Ctrl]-[B] – Передвинуть курсор на один символ назад
* [Meta]-[F] – Передвинуть курсор на одно слово вперед

41
00:06:13,520 --> 00:06:19,840
* [Meta]-[B] – Передвинуть курсор на одно слово назад
* [Ctrl]-[A] – Перейти в начало строки

42
00:06:19,840 --> 00:06:25,200
* [Ctrl]-[E] – Перейти в конец строки
* [Ctrl]-[L] – Очистка экрана,

43
00:06:26,080 --> 00:06:33,280
как при команде `clear`
* [Ctrl]-[R] – Позволяет вам

44
00:06:33,280 --> 00:06:40,960
осуществить поиск среди команд, введенных ранее
* [Ctrl]-[K] – Очистить строку за курсором

45
00:06:41,920 --> 00:06:48,480
Выглядит более или менее понятно, за исключением клавиши Meta.

46
00:06:49,760 --> 00:06:58,640
Meta -- это клавиша-модификатор на некоторых клавиатурах,
 например от Sun Microsystems.

47
00:06:59,440 --> 00:07:09,040
Эта клавиша используется и в других программах,
 например, в текстовом редакторе Emacs.

48
00:07:10,720 --> 00:07:19,760
На клавиатурах, где Meta отсутствует (например, на обычных PC),
 она может быть заменена

49
00:07:19,760 --> 00:07:25,120
другими клавишами, такими как Alt или Esc.  

50
00:07:26,720 --> 00:07:44,000
Но имейте в виду основное различие между такими клавишами --
 клавиша Alt также является модификатором клавиши

51
00:07:44,000 --> 00:07:58,000
и должна быть нажата одновременно с изменяемой клавишей,
 но ESC обычно является настоящим символом ASCII

52
00:07:58,000 --> 00:08:11,840
(27/шестнадцатеричный 0x1B/восьмеричный 033) и должна нажиматься последовательно перед следующей клавишей комбинации.

53
00:08:14,960 --> 00:08:22,080
Другой ключевой момент заключается в том,
 что эти комбинации клавиш растут из разных мест.

54
00:08:22,080 --> 00:08:30,160
Второй набор -- это просто значения по умолчанию для этой
 конкретной оболочки, которые можно изменить с помощью

55
00:08:30,160 --> 00:08:37,280
настроек Shell. А вот первый -- это настройки драйвера TTY.
 И если мы хотим изменить

56
00:08:38,400 --> 00:08:46,000
эти сочетания клавиш, например, чтобы клавиша Delete не прерывала процесс,

57
00:08:46,720 --> 00:08:53,840
мы можем сделать это, запросив ядро ОС изменить параметры

58
00:08:54,720 --> 00:09:07,840
соответствующего драйвера. Как мы увидим позже,
 это можно сделать с помощью утилиты `stty`.

