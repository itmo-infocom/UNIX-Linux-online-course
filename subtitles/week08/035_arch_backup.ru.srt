1
00:00:05,120 --> 00:00:18,039
Итак, теперь давайте обсудим резервное копирование и архивирование.

2
00:00:18,039 --> 00:00:42,800
Исторически первая утилита архиватора Unix, известная как `ar`,
 была разработана в 1971 году в AT&T. 

3
00:00:42,800 --> 00:00:59,450
Она группирует файлы в единый архив. Сегодня `ar` обычно используется

4
00:00:59,450 --> 00:01:09,760
в основном для создания файлов статических библиотек
 (которые внутри являются просто архивом с объектными файлами,

5
00:01:09,760 --> 00:01:15,561
скомпилированными из исходных файлов).
Эти библиотеки использует редактор ссылок

6
00:01:15,561 --> 00:01:35,210
или компоновщик (linker). Реализация `ar` включена в состав GNU Binutils.

7
00:01:35,210 --> 00:01:45,360
Но наиболее широко используемые инструменты
 для архивирования -- это `tar` и `cpio`.

8
00:01:45,360 --> 00:02:05,160
Tar -- это "tape archiver" (ленточный архиватор),
 первоначально разработанный AT&T в конце 70-х годов

9
00:02:05,160 --> 00:02:19,480
для хранения данных на магнитных лентах.
 Он помещает указанные файлы на ленту или в дисковый архив

10
00:02:19,480 --> 00:02:26,510
и может восстанавливать отдельные файлы из такого архива.

11
00:02:27,980 --> 00:02:32,310
Основные операции с tar-архивом:

12
00:02:32,310 --> 00:02:41,490
* 'c' -- создать архив,
* 't' -- перечислить файлы в архиве

13
00:02:41,490 --> 00:02:49,020
* и 'x'-- извлечь файлы из архива.

14
00:02:49,020 --> 00:02:55,050
Полезные опции:
* 'v' -- подробно,

15
00:02:55,050 --> 00:03:15,480
* 'f' -- файл или устройство для архивирования. «Тире», используемое в качестве имени файла, в данном случае означает стандартный ввод или вывод.

16
00:03:15,480 --> 00:03:23,830
Версия GNU также поддерживает сжатие/распаковку архивов:

17
00:03:23,830 --> 00:03:32,620
* -a, --auto-compress -- использовать суффикс архива
 для определения программы сжатия

18
00:03:32,620 --> 00:04:06,420
* -Z, --compress, --uncompress -- самая старая программа
 UNIX `compress`, суффикс архива `.tar.Z`

19
00:04:06,420 --> 00:04:25,120
* -z, --gzip, --gunzip, --ungzip -- суффикс архива ` .tar.gz` или просто `.tgz`

20
00:04:25,129 --> 00:05:07,770
* -j, --bzip2 -- суффикс архива `.tar.bz2` или` .tbz2` или просто `.tbz`

21
00:05:07,770 --> 00:05:37,080
* -J, --xz -- суффикс архива` .tar.xz` или '.txz'

22
00:05:37,099 --> 00:05:46,169
Для стандартного классического UNIX `tar`
 внешние программы сжатия/распаковки

23
00:05:46,169 --> 00:05:58,529
должны использоваться следующим образом:

24
00:05:58,529 --> 00:06:33,520
tar создает архив в stdout, какие-то файлы, gzip -c в какой-то архив.

25
00:06:33,520 --> 00:06:43,800
Для просмотра сжатого архива мы можем использовать такую ​​команду.

26
00:07:05,240 --> 00:07:40,610
И для получения файлов из этого архива.

27
00:07:40,610 --> 00:07:59,039
Основная проблема со сжатыми архивами заключается в том,
 что если у вас есть какие-то повреждения в середине файла архива,

28
00:07:59,039 --> 00:08:05,919
вы потеряете все содержимое из хвоста.
Просто потому, что этот формат ориентирован

29
00:08:05,919 --> 00:08:37,260
на хранение на ленте, и все метаданные о файлах хранятся
 последовательно, а не в каком-то центральном каталоге.

30
00:08:37,260 --> 00:08:37,760
А если вы хотите повысить надежность своих данных,

31
00:08:37,760 --> 00:08:59,960
имеет смысл сжимать файлы по отдельности
и помещать их в несжатый архив.

32
00:08:59,960 --> 00:09:12,000
Итак, другой широко используемый инструмент архивирования -- это `cpio`.

33
00:09:12,010 --> 00:09:22,810
Основные операции с ним:
* -o | --create -- создать

34
00:09:22,810 --> 00:09:33,770
* -t | --list -- распечатать содержимое входного потока

35
00:09:33,770 --> 00:09:47,350
* -i | --extract -- извлечь
* а также -p | --pass-through -- это так называемый

36
00:09:47,350 --> 00:09:54,100
режим копирования-передачи, `cpio` копирует файлы
 из одного дерева каталогов в другое

37
00:09:54,100 --> 00:10:02,380
без задействования архива как такового.

38
00:10:02,380 --> 00:10:09,570
В отличие от `tar`, который работает с файлами, `cpio` работает с stdin/stdout.

39
00:10:09,570 --> 00:10:28,080
Это неплохо, но такой архив может содержать какие-то специальные файлы, которые не обрабатываются должным образом.

40
00:10:28,080 --> 00:10:42,180
Например, жесткие ссылки могут разделиться на несколько файлов.
 А для реального резервного копирования

41
00:10:42,180 --> 00:10:49,080
в UNIX-подобных системах были разработаны специальные программы,
 которые знают о внутренней структуре файловой системы, например:

42
00:10:49,080 --> 00:11:03,279
* dump/restore -- резервное копирование/восстановление
 файловой системы ext2/3/4

43
00:11:03,279 --> 00:11:25,660
* и xfsdump/xfsrestore -- резервное копирование/восстановление
 файловых систем XFS.

44
00:11:25,670 --> 00:11:41,551
Основные аргументы: список файлов и каталогов
 для дампа и '-f' для файла, куда делается дамп.

45
00:11:41,551 --> 00:11:57,640
Кроме этого можно выбрать «уровень дампа» в виде целого числа.
 Уровень 0, полное резервное копирование.

46
00:11:57,640 --> 00:12:09,940
Указание параметра -0 гарантирует копирование
 всей файловой системы. Номер уровня выше 0 --

47
00:12:09,940 --> 00:12:16,940
это так называемое «инкрементальное резервное копирование», что указывает `dump`у копировать все файлы, вновь появившиеся или измененные

48
00:12:16,940 --> 00:12:32,140
с момента последнего дампа более низкого уровня.
 Уровень по умолчанию -0 (полное резервное копирование).

49
00:12:32,140 --> 00:12:42,040
А это дает возможность реализовывать различные
 «стратегии резервного копирования». Например, вы можете

50
00:12:42,040 --> 00:12:42,540
создать полную резервную копию в конце недели,
 а затем делать инкрементальные резервные копии

51
00:12:42,540 --> 00:12:49,540
в каждый день недели. Затем в конце недели для новой полной
 резервной копии вы можете использовать самое старое хранилище

52
00:12:49,540 --> 00:12:56,540
резервных копий из пула полных резервных копий.
 Таким образом, у вас будут еженедельные полные резервные копии

53
00:12:56,540 --> 00:13:12,360
за определенный период и ежедневные сохраненные состояния
 в инкрементальных резервных копиях в течение недели-другой.

54
00:13:12,360 --> 00:13:18,040
И затем вы можете извлечь полный дамп
 или отдельные файлы или каталоги

55
00:13:18,040 --> 00:13:26,130
из сохраненного дампа с помощью утилиты `restore`.

56
00:13:30,370 --> 00:13:37,560
Вы также можете сделать это в интерактивном режиме с помощью опции `-i`.

