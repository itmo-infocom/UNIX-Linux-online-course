1
00:00:06,320 --> 00:00:16,480
Что ж. Теперь поговорим об установке программного обеспечения. Первоначальный набор программного обеспечения устанавливается

2
00:00:17,280 --> 00:00:17,780
во время инсталляции системы, а установленные пакеты
 программного обеспечения обновляются

3
00:00:17,780 --> 00:00:38,400
системными службами, когда новые версии публикуются
 на системных сайтах. Но давайте заглянем поглубже.

4
00:00:42,480 --> 00:00:57,840
Начиная с First Research Edition (3 ноября 1971 г.), в котором UNIX PDP-7

5
00:00:58,480 --> 00:01:09,520
был переписан для процессора PDP-11, для UNIX было составлено руководство  "User Maintained Programs" ("Программы, поддерживаемые пользователем"),

6
00:01:11,440 --> 00:01:20,320
касающееся организации кода сторонних разработчиков
 в виде так называемых "пакетов" или "портов".

7
00:01:22,000 --> 00:01:30,480
Два первых дистрибутива Беркли представили
 сообществу пользователей сторонние программные пакеты,

8
00:01:30,480 --> 00:01:35,600
ориентированные на Unix. С годами число пакетов

9
00:01:38,080 --> 00:01:43,040
множились и расширялось, сначала через группы новостей USENET,

10
00:01:43,040 --> 00:01:54,240
а затем через Интернет в форме портов
 для определенных дистрибутивов операционной системы.

11
00:01:56,720 --> 00:02:04,800
Установленная иерархия каталогов файловой системы предоставила шаблон

12
00:02:05,840 --> 00:02:11,200
для размещения исходного кода,
 документации и страниц руководства.

13
00:02:11,200 --> 00:02:25,040
Кроме того, использование утилиты `make` предоставило
 общий способ формализации правил компиляции и развертывания.

14
00:02:25,920 --> 00:02:33,760
А теперь, если мы говорим о бесплатном и открытом исходном коде,
 наиболее общий вариант развёртывания --

15
00:02:35,680 --> 00:02:45,200
это компиляция из исходного кода. Для многих проектов
 достаточно просто загрузить исходный код,

16
00:02:46,720 --> 00:02:56,480
запустить сценарий `configure` и выполнить `make install`.
 Эта команда считывает инструкцию

17
00:02:56,480 --> 00:03:05,920
из файла с именем "Makefile" и устанавливает
 программное обеспечение в целевой каталог,

18
00:03:07,120 --> 00:03:17,840
по умолчанию `/usr/local`. Вы можете изменить этот
 и другие параметры во время настройки.

19
00:03:20,240 --> 00:03:32,800
Звучит неплохо, но в большинстве случаев у нас могут возникнуть
 проблемы с удалением и обновлением установленного

20
00:03:32,800 --> 00:03:39,800
программного обеспечения, потому что в большинстве случаев
 такие действия могут быть не такими простыми, и правило "uninstall"

21
00:03:39,800 --> 00:03:52,560
в большинстве случаев в файлах Makefile не реализовано.
 И для выполнения полного набора действий

22
00:03:53,760 --> 00:04:04,960
с программным обеспечением был разработан специальный тип файлов, называемых пакетами программного обеспечения,

23
00:04:06,160 --> 00:04:16,240
а также было разработано программное обеспечение для управления ими.
 Оно различается в разных системах и дистрибутивах.

24
00:04:16,880 --> 00:04:24,480
BSD UNIX packaging был расширен до машинерии FreeBSD `ports`,

25
00:04:24,480 --> 00:04:32,080
который обеспечивает механизм для компиляции
 и установки сторонних пакетов

26
00:04:32,080 --> 00:04:41,840
и их зависимостей. Основными утилитами для работы
 с пакетами в Linux являются

27
00:04:45,600 --> 00:04:51,920
`rpm` (RH Package Manager) для RH-подобных систем

28
00:04:55,520 --> 00:05:09,840
и` dpkg` для дистрибутивов на основе Debian.

29
00:05:13,520 --> 00:05:22,480
Пакет -- это просто файл, который вы можете установить, удалить и обновить.

30
00:05:23,280 --> 00:05:32,400
Но когда у нас есть много пакетов со сложной
 системой зависимостей между ними,

31
00:05:33,600 --> 00:05:42,080
это может оказаться слишком сложным -- обрабатывать полный набор зависимых пакетов во время манипулирования пакетами.

32
00:05:43,120 --> 00:05:53,520
Для решения этой проблемы были разработаны так называемые "репозитории", которые собирают множество пакетов,

33
00:05:54,240 --> 00:06:00,320
разрешают зависимости между ними и помещают
 информацию об этом в файлы метаданных.

34
00:06:02,080 --> 00:06:06,240
Такие репозитории размещаются на серверах

35
00:06:06,240 --> 00:06:13,040
соответствующих проектов, и мы можем
 получить доступ к ним через Интернет.

36
00:06:14,480 --> 00:06:29,280
Основные инструменты для работы с репозиториями:
* `yum` - Yellowdog Updater, Modified

37
00:06:31,040 --> 00:06:32,720
для репозиториев RPM,

38
00:06:34,080 --> 00:06:40,000
теперь заменен менеджером пакетов `dnf`

39
00:06:44,320 --> 00:06:50,080
* и `apt` -- менеджер пакетов для репозиториев на базе Debian.

40
00:06:50,080 --> 00:06:57,840
Как мы видим, с помощью этих инструментов
 мы можем выполнять те же действия, что и с `rpm` и `dpkg`:

41
00:07:00,000 --> 00:07:02,560
устанавливать, удалять

42
00:07:07,040 --> 00:07:08,720
и обновлять пакеты с зависимостями.

43
00:07:13,360 --> 00:07:18,880
Мы также можем получить информацию о пакетах

44
00:07:22,800 --> 00:07:26,800
и группах пакетов в репозиториях, получить список пакетов,

45
00:07:26,800 --> 00:07:32,960
искать пакеты по имени или по файлам, включенным в пакет.

46
00:07:34,480 --> 00:07:42,240
Также может быть полезен `yumdownloader` --
 программа для загрузки RPM из репозиториев.

47
00:07:43,200 --> 00:08:03,280
Вы можете найти описания репозиториев:
* в каталоге `/etc/yum.repos.d/`-- в RH-подобных системах

48
00:08:03,280 --> 00:08:28,560
* и в `/etc/apt/sources.list` -- в дистрибутивах на основе Debian.

49
00:08:31,920 --> 00:08:42,400
Соответствие между программами,
 связанными с пакетами, вы можете увидеть

50
00:08:42,400 --> 00:08:51,600
 в  "Table  of equivalent commands for package management
  on both Ubuntu/Debian and Red Hat/Fedora".

51
00:08:52,240 --> 00:08:55,040
Также наша лекция

52
00:08:56,320 --> 00:09:07,280
«Под капотом -- устройства и драйверы» даёт
 некоторое понимание о работе с драйверами устройств.

53
00:09:07,280 --> 00:09:16,160
ОК. Многие языки программирования и среды разработки

54
00:09:16,160 --> 00:09:22,720
имеют свои собственные системы пакетов и репозитории,

55
00:09:27,200 --> 00:09:41,680
такие как CPAN, PyPi, NPM и т.д.

56
00:09:41,680 --> 00:09:58,240
Также в последнее время все более популярными становятся такие
 формы распространения продуктов, как статические двоичные файлы,

57
00:09:58,240 --> 00:10:08,960
контейнеры докеров, а так же предварительно
 настроенные виртуальные машины.

