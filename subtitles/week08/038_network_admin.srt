1
00:00:05,120 --> 00:00:12,800
Finally, let's discuss the administrative tasks 
associated with the network. In most cases,  

2
00:00:14,080 --> 00:00:22,320
after installing the system, you have a more 
or less configured network in accordance  

3
00:00:22,320 --> 00:00:37,920
with the DHCP settings of your local network. The 
most you need is to setup a password for your WiFi.

4
00:00:40,560 --> 00:00:49,920
But in some cases it would be helpful 
to have some utilities to view and  

5
00:00:51,120 --> 00:00:58,080
manage network settings. Unlike 
other devices, network interfaces  

6
00:00:58,080 --> 00:01:06,240
do not have their own representations in 
the device files in the /dev directory.  

7
00:01:08,240 --> 00:01:20,000
You can work with them only with the 
help of special utilities. Traditional  

8
00:01:20,000 --> 00:01:29,200
set of utilities for network configuration:
* `ifconfig` -- to configure a network interface 

9
00:01:29,200 --> 00:01:38,720
* and `route` -- which show/manipulate 
the IP routing table

10
00:01:39,600 --> 00:01:41,840
With no arguments,  

11
00:01:52,560 --> 00:02:02,200
ifconfig just shows us the current state of 
enabled network interfaces. By pointing to a  

12
00:02:02,800 --> 00:02:10,800
network interface, we can "up" 
and "down" them, we can also  

13
00:02:17,120 --> 00:02:24,880
manually set the IP address and netmask

14
00:02:24,880 --> 00:02:28,440
for such interface

15
00:02:29,040 --> 00:02:35,840
We can use the `route`  

16
00:02:42,720 --> 00:02:49,840
utility to work with the routing table. To 
view the route table we may run command: 

17
00:02:49,840 --> 00:02:50,427
$ route -n 

18
00:02:50,427 --> 00:02:55,840
The option '-n' show numerical addresses instead  

19
00:02:55,840 --> 00:03:04,240
of trying to determine symbolic host names. 
This can be useful if you are having problems  

20
00:03:04,240 --> 00:03:09,680
accessing the DNS server.

21
00:03:16,080 --> 00:03:25,680
With this command we can add and remove routes to 
hosts and networks. We can set gateways to them.

22
00:03:28,320 --> 00:03:38,960
In modern Linux distributions, these `net-tools` 
are outdated and are not installed by default.  

23
00:03:39,920 --> 00:03:49,840
They are migrating to the more versatile `ip` 
utility, which also supports more advanced  

24
00:03:51,520 --> 00:04:01,000
networking options than `net-tools`.

25
00:04:04,720 --> 00:04:06,080
You can use  

26
00:04:13,840 --> 00:04:34,400
`ip link` to perform the same 
tasks as `ifconfig` and `ip route`  

27
00:04:41,280 --> 00:04:43,223
to replace `route`.

28
00:04:46,457 --> 00:04:49,200
The next important task  

29
00:04:50,400 --> 00:05:09,840
when setting up your network is setting up 
DNS resolving. This configuration is placed in  

30
00:05:11,600 --> 00:05:13,963
`/etc/resolv.conf`:

31
00:05:18,320 --> 00:05:28,434
Here we can configure up to 3 nameservers.

32
00:05:28,640 --> 00:05:34,160
Also, using the `search` configuration 
option, we can configure the  

33
00:05:36,400 --> 00:05:40,240
domains in which short names will be searched.

34
00:05:40,240 --> 00:05:46,080
And finally, a few words about  

35
00:05:46,640 --> 00:05:55,920
regulating network access to your computer. As 
we understand, network attacks are currently  

36
00:05:55,920 --> 00:06:05,840
the most dangerous. And the most famous 
tool for restricting access is a firewall.

37
00:06:08,720 --> 00:06:22,160
At its deep level, the firewall in Linux is 
controlled by the `iptables` utility and moving to  

38
00:06:23,760 --> 00:06:30,080
`nftables` now. But at a higher 
level, different systems manage  

39
00:06:30,640 --> 00:06:38,520
it in different distributions:
* Canonical’s Uncomplicated Firewall (`ufw`)  

40
00:06:43,600 --> 00:06:50,800
to configure the iptables on 
every Ubuntu and Debian systems.  

41
00:06:52,400 --> 00:07:04,800
The firewall isn’t enabled by default in Ubuntu 
nor installed by default in Debian. As its name  

42
00:07:04,800 --> 00:07:12,960
suggests, it’s fairly uncomplicated to set up 
and maintain. It has an easy to remember syntax  

43
00:07:13,760 --> 00:07:20,800
that’s more friendly to human users 
than the underlying `iptables` rules. 

44
00:07:20,800 --> 00:07:43,840
* Fedora and Red Hat Enterprise like 
Linuxes enables Firewall Daemon (FirewallD) by default. Its  

45
00:07:47,600 --> 00:07:58,080
`firewall-cmd` front-end has almost the same 
feature set for basic firewall management as  

46
00:07:59,520 --> 00:08:11,840
`ufw`, and adds network zone management 
to the mix. Zone management allows  

47
00:08:13,360 --> 00:08:19,520
you to set up presets with rules for different  

48
00:08:20,880 --> 00:08:26,480
network conditions/locations. For 
example “Home” and “Office” where all  

49
00:08:27,120 --> 00:08:35,600
communications with local machines are allowed, 
and “Public Wi-Fi” where no communication with  

50
00:08:37,120 --> 00:08:46,720
the same subnet would be allowed. Rules can be 
applied automatically per network interface,  

51
00:08:46,720 --> 00:08:57,440
or used through NetworkManager and the 
GNOME network GUI `system-config-firewall`.

52
00:08:57,440 --> 00:09:03,840
Both front-ends come with 
pre-defined rules for common server  

53
00:09:04,400 --> 00:09:11,760
services and protocols. These rules include 
a keyword/name and associated industry  

54
00:09:12,480 --> 00:09:24,880
standards and default ports for running services 
publicly. They each come in their own formats that  

55
00:09:25,760 --> 00:09:38,560
aren’t interoperable with each other, of course. 
`ufw` uses service-named files containing  

56
00:09:39,440 --> 00:09:51,360
one line with port and protocol, and `FirewallD` 
uses six lines of XML to create the same profile.

57
00:09:52,720 --> 00:10:04,240
The best policy is to simply close all 
services from the Internet that you do not need  

58
00:10:04,240 --> 00:10:12,480
on your computer, and only open those that you 
need for remote access. For example -- SSH.

59
00:10:13,280 --> 00:10:31,840
And then just use the lighter tweak 
tool -- host access control files: 

60
00:10:39,040 --> 00:10:49,760
This is the configuration for the so-called "TCP 
Wrapper", which was originally developed as a  

61
00:10:49,760 --> 00:10:58,240
`tcpd` service for the `inetd` superserver, 
and now its functionality is included in the  

62
00:10:58,960 --> 00:11:05,760
`libwrap` library that is used by 
several network services such as NFS.

63
00:11:06,320 --> 00:11:19,040
Again, the easiest way is to disable everything in 
the configuration file `/etc/hosts.deny` and allow  

64
00:11:20,640 --> 00:11:31,200
only a fixed list of hosts to access 
your computer, for example, via SSH in  

65
00:11:35,040 --> 00:11:40,160
`/etc/hosts.allow`. Using this 
mechanism is easier than using a  

66
00:11:40,160 --> 00:11:44,960
firewall because all changes are 
made immediately after saving the  

67
00:11:44,960 --> 00:11:51,720
configuration file -- you don't need 
to reconfigure and reload any services.

68
00:11:51,720 --> 00:11:58,880
And if we talk about older classical  

69
00:11:58,880 --> 00:12:10,160
systems, then tcp_wrapper `tcpd` is configured 
through the `inetd` service. As we'll see,  

70
00:12:14,080 --> 00:12:19,680
this is a so-called superserver 
designed to make the life of  

71
00:12:21,040 --> 00:12:29,360
network developers easier. To create the 
server side of a network application,  

72
00:12:29,360 --> 00:12:39,280
you just need to develop an application 
that reads stdin and writes to stdout, and  

73
00:12:40,960 --> 00:12:48,720
write the service configuration to the 
`inetd` configuration file. All the work of  

74
00:12:48,720 --> 00:12:56,560
listening on network sockets and maintaining 
the connection makes a super-server for you.

75
00:12:57,600 --> 00:13:11,520
Classic services such as FTP, mailing POP3, and 
TELNET were designed to work with `inetd`.  

76
00:13:12,560 --> 00:13:18,960
It is also possible to configure an 
HTTP server for access via `inetd`.  

77
00:13:21,280 --> 00:13:27,520
Newer systems have replaced `inetd` 
with `xinetd`, which provides  

78
00:13:27,520 --> 00:13:40,160
better protection against DOS attacks, and 
replaced with `systemd` in newest systems.

